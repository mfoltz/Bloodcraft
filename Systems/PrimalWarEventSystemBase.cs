using Bloodcraft.Resources;
using Bloodcraft.Utilities;
using Il2CppInterop.Runtime;
using ProjectM;
using ProjectM.Behaviours;
using ProjectM.Scripting;
using ProjectM.Shared.WarEvents;
using Stunlock.Core;
using Unity.Collections;
using Unity.Entities;
using Unity.Jobs;
using Unity.Mathematics;
using Unity.Transforms;

namespace Bloodcraft.Systems;
public class PrimalWarEventSystem : SystemBase
{
    public static PrimalWarEventSystem Instance { get; set; }
    ServerGameManager _serverGameManager;

    const int UNIT_LEVELS = 5;
    const int BOSS_LEVELS = 10;

    const float LOW_AMP = 1.25f;
    const float MID_AMP = 1.5f;
    const float HIGH_AMP = 2f;

    const float AURA_CHANCE = 0.05f;

    static readonly PrefabGUID _primalGate = PrefabGUIDs.UC_WarEvent_Legion_Bosses_Primal;
    static readonly PrefabGUID _primalPortal = PrefabGUIDs.UC_WarEvent_Legion_Smallwaves_Primal;

    static readonly PrefabGUID _lightningSmall = PrefabGUIDs.AB_LightningStorm_Throw;
    static readonly PrefabGUID _lightningBig = PrefabGUIDs.AB_LightningStorm_Throw_Big;

    static readonly PrefabGUID _levelAuraBuff = PrefabGUIDs.Shared_Affix_LevelAura_Self;
    static readonly PrefabGUID _bloodRainBuff = PrefabGUIDs.AB_Dracula_Final_TravelToCenter_Normal_BloodRainBuff;

    static int _count = 0;
    static bool _isEdited = false;

    EntityQuery _gateQuery;
    EntityQuery _portalQuery;

    ComponentLookup<VBloodUnit> _vBloodLookup;
    ComponentLookup<Translation> _translationLookup;

    ComponentTypeHandle<WarEvent_ActiveGate> _gateHandle;
    ComponentTypeHandle<WarEvent_ActivePortal> _portalHandle;
    BufferTypeHandle<WarEvent_ActiveUnit> _unitBufferHandle;

    EntityTypeHandle _entityHandle;
    EntityStorageInfoLookup _entityStorageInfoLookup;

    NativeParallelHashSet<Entity> _processedUnits;

    DateTime _lastLogTime = DateTime.UtcNow;
    public override void OnCreate()
    {
        Instance = this;

        _gateQuery = GetEntityQuery(new EntityQueryDesc
        {
            All = new[] 
            { 
                ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveGate>()),
                ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveUnit>()) 
            },
            Options = EntityQueryOptions.IncludeDisabled
        });

        _portalQuery = GetEntityQuery(new EntityQueryDesc
        {
            All = new[] 
            { 
                ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActivePortal>()),
                ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveUnit>()) 
            },
            Options = EntityQueryOptions.IncludeDisabled
        });

        _vBloodLookup = GetComponentLookup<VBloodUnit>(true);
        _translationLookup = GetComponentLookup<Translation>(true);

        _gateHandle = GetComponentTypeHandle<WarEvent_ActiveGate>(true);
        _portalHandle = GetComponentTypeHandle<WarEvent_ActivePortal>(true);
        _unitBufferHandle = GetBufferTypeHandle<WarEvent_ActiveUnit>(true);

        _entityHandle = GetEntityTypeHandle();
        _entityStorageInfoLookup = GetEntityStorageInfoLookup();

        _processedUnits = new NativeParallelHashSet<Entity>(512, Allocator.Persistent);

        RequireForUpdate(_gateQuery);
        RequireForUpdate(_portalQuery);
        Enabled = true;
    }
    public override void OnStartRunning()
    {
        if (!_isEdited) _isEdited = TryModifyPrimalUnitCompositions();
    }
    bool TryModifyPrimalUnitCompositions()
    {
        _serverGameManager = World.GetExistingSystemManaged<ServerScriptMapper>().GetServerGameManager();
        // var prefabCollectionSystem = World.GetExistingSystemManaged<PrefabCollectionSystem>();

        bool wavesModified = false;
        bool soulsModified = false;

        Entity primalWaves = _serverGameManager.GetPrefabEntity(PrefabGUIDs.UC_WarEvent_Legion_Smallwaves_Primal);
        Entity majorWaves = _serverGameManager.GetPrefabEntity(PrefabGUIDs.UC_WarEvent_Legion_Smallwaves_Major);

        Entity primalSouls = _serverGameManager.GetPrefabEntity(PrefabGUIDs.UC_WarEvent_Legion_Bosses_Primal);
        Entity majorSouls = _serverGameManager.GetPrefabEntity(PrefabGUIDs.UC_WarEvent_Legion_Bosses_Major);

        if (_serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(primalWaves, out var targetBuffer)
            && _serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(primalWaves, out var targetUnitBuffer)
            && _serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(majorWaves, out var sourceBuffer)
            && _serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(majorWaves, out var sourceUnitBuffer))
        {
            targetBuffer.Clear();
            targetBuffer.CopyFrom(sourceBuffer);

            targetUnitBuffer.Clear();
            targetUnitBuffer.CopyFrom(sourceUnitBuffer);
            // Core.Log.LogWarning($"[PrimalWarEventSystem] Updated Primal Waves UC!");
            wavesModified = true;
        }

        if (_serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(primalSouls, out targetBuffer)
            && _serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(primalSouls, out targetUnitBuffer)
            && _serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(majorSouls, out sourceBuffer)
            && _serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(majorSouls, out sourceUnitBuffer))
        {
            targetBuffer.Clear();
            targetBuffer.CopyFrom(sourceBuffer);

            targetUnitBuffer.Clear();
            targetUnitBuffer.CopyFrom(sourceUnitBuffer);
            // Core.Log.LogWarning($"[PrimalWarEventSystem] Updated Primal Souls UC!");
            soulsModified = true;
        }

        return wavesModified && soulsModified;
    }
    public override void OnDestroy()
    {
        if (_processedUnits.IsCreated) _processedUnits.Dispose();
        if (Instance == this) Instance = null;
    }
    public override void OnUpdate()
    {
        _vBloodLookup.Update(this);
        _translationLookup.Update(this);

        _gateHandle.Update(this);
        _portalHandle.Update(this);
        _unitBufferHandle.Update(this);

        _entityHandle.Update(this);
        _entityStorageInfoLookup.Update(this);

        SweepProcessed();
        HandleActiveGates(_gateQuery);
        HandleActivePortals(_portalQuery);
        
        /*
        if ((DateTime.UtcNow - _lastLogTime).TotalSeconds >= 5)
        {
            Plugin.LogInstance.LogInfo($"[PrimalWarEventSystem] Primal Units: {_count}");
            _lastLogTime = DateTime.UtcNow;
            _count = 0;
        }
        */
    }

    const float FREQUENCY = 0.025f;
    const float DELAY = 0.25f;
    void HandleActiveGates(EntityQuery query)
    {
        // float strikeChance = Time.DeltaTime * FREQUENCY;
        var chunks = query.ToArchetypeChunkArray(Allocator.Temp);
        
        try
        {
            foreach (var chunk in chunks)
            {
                var gates = chunk.GetNativeArray(_gateHandle);
                var unitBuffers = chunk.GetBufferAccessor(_unitBufferHandle);

                for (int i = 0; i < chunk.Count; ++i)
                {
                    WarEvent_ActiveGate activeGate = gates[i];

                    if (!activeGate.UnitComposition.Equals(_primalGate)) continue;

                    var buffer = unitBuffers[i];
                    bool isActive = false;

                    foreach (var activeUnit in buffer)
                    {
                        Entity unitEntity = activeUnit.Instance;
                        bool isGateBoss = _vBloodLookup.HasComponent(unitEntity);

                        if (!_entityStorageInfoLookup.Exists(unitEntity)) continue;
                        else if (_processedUnits.Contains(unitEntity))
                        {
                            isActive = true;
                            continue;
                        }

                        unitEntity.TryApplyBuffWithLifeTimeNone(_bloodRainBuff);
                        ModifyPrimalUnit(unitEntity, isGateBoss);

                        isActive = true;
                        _processedUnits.Add(unitEntity);
                        _count++;
                    }

                    if (!isActive) continue;

                    bool shouldStrike = UnityEngine.Random.value < FREQUENCY;
                    bool hasTranslation = _translationLookup.TryGetComponent(activeGate.Entity, out Translation translation);

                    if (shouldStrike
                        && hasTranslation)
                    {
                        // Core.Log.LogWarning($"[PrimalWarEventSystem] Spawning Lightning Strike at {translation.Value}");
                        SpawnLightningStrike(translation.Value);
                    }
                }
            }
        }
        catch (Exception e)
        {
            Plugin.LogInstance.LogError($"[PrimalWarEventSystem.HandleActiveGates] Exception: {e}");
        }
        finally
        {
            chunks.Dispose();
        }
    }
    void HandleActivePortals(EntityQuery query)
    {
        var chunks = query.ToArchetypeChunkArray(Allocator.Temp);

        try
        {
            foreach (var chunk in chunks)
            {
                var portals = chunk.GetNativeArray(_portalHandle);
                var unitBuffers = chunk.GetBufferAccessor(_unitBufferHandle);

                for (int i = 0; i < chunk.Count; ++i)
                {
                    WarEvent_ActivePortal activePortal = portals[i];

                    if (!activePortal.UnitComposition.Equals(_primalPortal)) 
                        continue;

                    // activePortal.MinNormalUnits = 15;
                    // activePortal.ThrashPerNormal = 3;

                    var buffer = unitBuffers[i];
                    
                    foreach (var activeUnit in buffer)
                    {
                        Entity unitEntity = activeUnit.Instance;

                        if (!_entityStorageInfoLookup.Exists(unitEntity)) continue;
                        else if (_processedUnits.Contains(unitEntity)) continue;

                        if (Misc.RollForChance(AURA_CHANCE))
                        {
                            Core.RunDelayed(DELAY, () => unitEntity.TryApplyBuff(_levelAuraBuff));
                        }

                        ModifyPrimalUnit(unitEntity);

                        _processedUnits.Add(unitEntity);
                        _count++;
                    }
                }
            }
        }
        catch (Exception e)
        {
            Plugin.LogInstance.LogError($"[PrimalWarEventSystem.HandleActivePortals] Exception: {e}");
        }
        finally
        {
            chunks.Dispose();
        }
    }
    void SweepProcessed()
    {
        var units = _processedUnits.ToNativeArray(Allocator.Temp);

        foreach (var unit in units)
        {
            if (!_entityStorageInfoLookup.Exists(unit))
            {
                _processedUnits.Remove(unit);
            }
        }

        units.Dispose();
    }

    const float GATE_HEIGHT = 4f;
    const float RADIUS = 10f;
    void SpawnLightningStrike(float3 center)
    {
        bool toss = UnityEngine.Random.value < 0.25f;
        PrefabGUID prefabGuid = toss ? _lightningBig : _lightningSmall;

        float3 position = center + new float3(
            UnityEngine.Random.Range(-RADIUS, RADIUS),
            -GATE_HEIGHT,
            UnityEngine.Random.Range(-RADIUS, RADIUS)
        );
        
        Entity lightningStrike = _serverGameManager.InstantiateEntityImmediate(Entity.Null, prefabGuid);
        lightningStrike.SetPosition(position);
    }
    static void ModifyPrimalUnit(Entity entity, bool isGateBoss = false)
    {
        SetLevel(entity, isGateBoss);
        SetAttackSpeed(entity, isGateBoss);
        SetHealth(entity, isGateBoss);
        SetPower(entity, isGateBoss);
        SetMoveSpeed(entity);
    }
    static void SetLevel(Entity entity, bool isGateBoss)
    {
        int modifier = isGateBoss ? BOSS_LEVELS : UNIT_LEVELS;

        entity.With((ref UnitLevel unitLevel) =>
        {
            unitLevel.Level._Value += modifier;
        });
    }
    static void SetAttackSpeed(Entity entity, bool isGateBoss)
    {
        float modifier = isGateBoss ? HIGH_AMP : MID_AMP;

        entity.With((ref AbilityBar_Shared abilityBarShared) =>
        {
            abilityBarShared.AbilityAttackSpeed._Value *= modifier;
            abilityBarShared.PrimaryAttackSpeed._Value *= modifier;
        });
    }
    static void SetHealth(Entity entity, bool isGateBoss)
    {
        float modifier = isGateBoss ? HIGH_AMP : MID_AMP;

        entity.With((ref Health health) =>
        {
            health.MaxHealth._Value *= modifier;
            health.Value = health.MaxHealth._Value;
        });
    }
    static void SetPower(Entity entity, bool isGateBoss)
    {
        float modifier = isGateBoss ? HIGH_AMP : MID_AMP;

        entity.With((ref UnitStats unitStats) =>
        {
            unitStats.PhysicalPower._Value *= modifier;
            unitStats.SpellPower._Value *= modifier;
            unitStats.FireResistance._Value = isGateBoss ? 1 : unitStats.FireResistance._Value;
        });

        if (isGateBoss)
        {
            entity.HasWith((ref ResistanceData resistanceData) =>
            {
                resistanceData.FireResistance_DamageReductionPerRating = 100f;
                resistanceData.FireResistance_RedcuedIgiteChancePerRating = 100f;
            });
        }
    }
    static void SetMoveSpeed(Entity entity)
    {
        entity.With((ref AiMoveSpeeds aiMoveSpeeds) =>
        {
            aiMoveSpeeds.Walk._Value *= MID_AMP;
            aiMoveSpeeds.Run._Value *= MID_AMP;
            aiMoveSpeeds.Circle._Value *= MID_AMP;
        });
    }
}
