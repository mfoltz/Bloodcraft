using Bloodcraft.Factory;
using Bloodcraft.Resources;
using Bloodcraft.Services;
using Bloodcraft.Utilities;
using Il2CppInterop.Runtime;
using ProjectM;
using ProjectM.Network;
using ProjectM.Scripting;
using ProjectM.Shared.WarEvents;
using Stunlock.Core;
using System;
using System.Collections.Generic;
using System.Linq;
using Unity.Entities;
using Unity.Mathematics;

namespace Bloodcraft.Systems;
public partial class PrimalWarEventSystem : VSystemBase<PrimalWarEventSystem.Work>
{
    public static PrimalWarEventSystem Instance { get; set; }
    static class Constants
    {
        public const int UNIT_LVL = 10;
        public const int BOSS_LVL = 15;

        public const float LOW_AMP = 1.25f;
        public const float MED_AMP = 1.5f;
        public const float HIGH_AMP = 2f;
        public const float HEALTH_AMP = 3f;
        public const float BUFF_CHANCE = 0.2f;

        // public const float HIGH_FREQ = 0.025f;
        public const float HIGH_FREQ = 0.035f;
        public const float MED_FREQ = 0.0125f;
        public const float LOW_FREQ = 0.00625f;
        public const float EQUAL_WGT = 0.5f;
        public const float BASE_WGT = 0.25f;
        public const float HEAVY_WGT = 0.1f;

        public const float GATE_HEIGHT = 4f;
        public const float RADIUS = 10f;

        public const int MINUTE_SECONDS = 60;
        public const int DAY_SECONDS = 86400;
        public const int DAY_HOURS = 24;
        public const int RIFT_DURATION = 1200;
    }
    struct ActiveRift(RiftHazard hazard, double lifetime)
    {
        public RiftHazard Hazard = hazard;
        public double Lifetime = lifetime;
    }
    readonly struct RiftHazard(PrefabGUID primary, PrefabGUID secondary, float frequency, float weight = Constants.BASE_WGT)
    {
        public readonly PrefabGUID Primary { get; } = primary;
        public readonly PrefabGUID Secondary { get; } = secondary;
        public readonly float Frequency { get; } = frequency;
        public readonly float Weight { get; } = weight;

        static System.Random _random;
        public void TrySpawnHazard(ServerGameManager serverGameManager, float3 position)
        {
            EnsureSeeded(0xC0FFEEu);
            if (_random.NextDouble() < Frequency)
                WeightedThrow(serverGameManager, position);
        }
        void WeightedThrow(ServerGameManager serverGameManager, float3 center)
        {
            PrefabGUID prefabGuid = (_random.NextDouble() < Weight) ? Secondary : Primary;

            float3 pos = center + new float3(
                NextFloat(-Constants.RADIUS, Constants.RADIUS),
                -Constants.GATE_HEIGHT,
                NextFloat(-Constants.RADIUS, Constants.RADIUS)
            );

            Entity spawnedThrow = serverGameManager.InstantiateEntityImmediate(Entity.Null, prefabGuid);
            spawnedThrow.SetPosition(pos);
        }
        static void EnsureSeeded(uint salt = 0)
        {
            if (_random == null)
            {
                var seed = unchecked((int)Misc.GetRandomSeed(salt));
                _random = new System.Random(seed);
            }
        }
        static float NextFloat(float min, float max)
        {
            return min + ((float)_random.NextDouble() * (max - min));
        }

        /*
        static Unity.Mathematics.Random _random;
        public void TrySpawnHazard(ServerGameManager serverGameManager, float3 position)
        {
            EnsureSeeded(0xC0FFEEu);
            if (_random.NextFloat() < Frequency)
                WeightedThrow(serverGameManager, position);
        }
        void WeightedThrow(ServerGameManager serverGameManager, float3 center)
        {
            PrefabGUID prefabGuid = (_random.NextFloat() < Weight) ? Secondary : Primary;
            float3 position = center + new float3(
                _random.NextFloat(-Constants.RADIUS, Constants.RADIUS),
                -Constants.GATE_HEIGHT,
                _random.NextFloat(-Constants.RADIUS, Constants.RADIUS)
            );

            Entity spawnedThrow = serverGameManager.InstantiateEntityImmediate(Entity.Null, prefabGuid);
            spawnedThrow.SetPosition(position);
        }
        static void EnsureSeeded(uint salt = 0)
        {
            if (_random.state == 0)
            {
                var seed = Misc.GetRandomSeed(salt);
                _random = new Unity.Mathematics.Random(seed);
            }
        }
        */
    }

    static readonly ComponentType[] _eventComponents =
    [
        ComponentType.ReadOnly(Il2CppType.Of<WarEvent_StartEvent>()),
        ComponentType.ReadOnly(Il2CppType.Of<FromCharacter>()),
        ComponentType.ReadOnly(Il2CppType.Of<NetworkEventType>())
    ];

    static readonly PrefabGUID _primalGate = PrefabGUIDs.UC_WarEvent_Legion_Bosses_Primal;
    static readonly PrefabGUID _primalPortal = PrefabGUIDs.UC_WarEvent_Legion_Smallwaves_Primal;
    static readonly PrefabGUID _bloodRainBuff = PrefabGUIDs.AB_Dracula_Final_TravelToCenter_Normal_BloodRainBuff;

    static readonly List<PrefabGUID> _variantBuffs =
    [
        PrefabGUIDs.Shared_Affix_LevelAura_Self,
        PrefabGUIDs.AB_CastleMan_HolyBeam_PowerBuff_01,
        PrefabGUIDs.AB_Chaos_PowerSurge_Buff,
        PrefabGUIDs.AB_Bandit_Foreman_BloodRage_Buff
    ];

    readonly List<RiftHazard> _riftHazards = // note to add name field for these
    [
        new(PrefabGUIDs.AB_LightningStorm_Throw,
            PrefabGUIDs.AB_LightningStorm_Throw_Big,
            Constants.HIGH_FREQ,
            Constants.BASE_WGT),
        //new(PrefabGUIDs.AB_Manticore_FrostVortex_Throw,
        //    PrefabGUIDs.AB_ChurchOfLight_Overseer_IceRecovery_Hard_IcicleThrow,
        //    Constants.HIGH_FREQ,
        //    Constants.BASE_WGT),
        //new(PrefabGUIDs.AB_Blackfang_Morgana_SpectralSnake_Far_Throw_02,
        //    PrefabGUIDs.AB_Emery_Erruption_Golem_Throw_Elemental,
        //    Constants.HIGH_FREQ,
        //    Constants.BASE_WGT),
    ];

    static int PrimalRifts { get; } = Math.Min(ConfigService.RiftFrequency, Constants.DAY_HOURS);
    static int RiftInterval { get; } = PrimalRifts > 0
        ? Constants.DAY_SECONDS / PrimalRifts
        : 0;

    static double _nextRiftTime = double.MaxValue;
    static double _lastNotified = -1;

    static bool _isEdited;

    bool TryModifyPrimalUnitCompositions(ServerGameManager serverGameManager)
    {
        bool wavesModified = false;
        bool soulsModified = false;

        Entity primalWaves = serverGameManager.GetPrefabEntity(PrefabGUIDs.UC_WarEvent_Legion_Smallwaves_Primal);
        Entity majorWaves = serverGameManager.GetPrefabEntity(PrefabGUIDs.UC_WarEvent_Legion_Smallwaves_Major);

        Entity primalSouls = serverGameManager.GetPrefabEntity(PrefabGUIDs.UC_WarEvent_Legion_Bosses_Primal);
        Entity majorSouls = serverGameManager.GetPrefabEntity(PrefabGUIDs.UC_WarEvent_Legion_Bosses_Major);

        if (serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(primalWaves, out var targetBuffer)
            && serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(primalWaves, out var targetUnitBuffer)
            && serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(majorWaves, out var sourceBuffer)
            && serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(majorWaves, out var sourceUnitBuffer))
        {
            targetBuffer.Clear();
            targetBuffer.CopyFrom(sourceBuffer);

            targetUnitBuffer.Clear();
            targetUnitBuffer.CopyFrom(sourceUnitBuffer);

            /*
            for (int i = 0; i < targetBuffer.Length; i++)
            {
                var group = targetBuffer[i];
                group.UnitsCount += 5;
                targetBuffer[i] = group;
            }
            */

            wavesModified = true;
        }

        if (serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(primalSouls, out targetBuffer)
            && serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(primalSouls, out targetUnitBuffer)
            && serverGameManager.TryGetBuffer<UnitCompositionGroupEntry>(majorSouls, out sourceBuffer)
            && serverGameManager.TryGetBuffer<UnitCompositionGroupUnitEntry>(majorSouls, out sourceUnitBuffer))
        {
            targetBuffer.Clear();
            targetBuffer.CopyFrom(sourceBuffer);

            targetUnitBuffer.Clear();
            targetUnitBuffer.CopyFrom(sourceUnitBuffer);

            /*
            for (int i = 0; i < targetBuffer.Length; i++)
            {
                var group = targetBuffer[i];
                group.UnitsCount++;
                targetBuffer[i] = group;
            }
            */

            soulsModified = true;
        }

        return wavesModified && soulsModified;
    }
    public static void OnSchedule()
    {
        if (_nextRiftTime == double.MaxValue)
        {
            _nextRiftTime = Core.ServerGameManager.ServerTime + RiftInterval;

            DateTime utcThen = DateTime.UtcNow.AddSeconds(RiftInterval);
            DateTime localThen = utcThen.ToLocalTime();

            Core.Log.LogWarning($"[PrimalWarEventSystem]: ~It's The Primal Countdown~ ({RiftInterval / Constants.MINUTE_SECONDS}m | {localThen:HH:mm})");
            return;
        }

        double remainingSeconds = _nextRiftTime - Core.ServerGameManager.ServerTime;

        if (remainingSeconds <= 0)
        {
            TryStartPrimalRifts();
            return;
        }

        int remainingMinutes = (int)(remainingSeconds / Constants.MINUTE_SECONDS);

        if (remainingMinutes != RiftInterval / Constants.MINUTE_SECONDS &&
            remainingMinutes % 15 == 0 &&
            remainingMinutes != _lastNotified)
        {
            _lastNotified = remainingMinutes;

            DateTime utcThen = DateTime.UtcNow.AddSeconds(remainingSeconds);
            DateTime localThen = utcThen.ToLocalTime();

            Core.Log.LogWarning($"[PrimalWarEventSystem]: #SoonTM ({remainingMinutes}m | {localThen:HH:mm})");
        }
    }
    public static void TryStartPrimalRifts()
    {
        _nextRiftTime = Core.ServerGameManager.ServerTime + RiftInterval;

        if (!PlayerService.SteamIdOnlinePlayerInfoCache.Any())
            return;

        var player = PlayerService.SteamIdOnlinePlayerInfoCache.Values.FirstOrDefault();

        NetworkEventType networkEventType = new()
        {
            EventId = NetworkEvents.EventId_WarEvent_StartEvent,
            IsAdminEvent = true,
            IsDebugEvent = true
        };

        WarEvent_StartEvent warEvent = new()
        {
            EventType = WarEventType.Primal,
            EnableAllGates = true
        };

        FromCharacter fromCharacter = new()
        {
            Character = player.CharEntity,
            User = player.UserEntity
        };

        Entity entity = Core.EntityManager.CreateEntity(_eventComponents);
        entity.Write(warEvent);
        entity.Write(fromCharacter);
        entity.Write(networkEventType);

        Core.Log.LogWarning($"[PrimalWarEventSystem]: Primal Rifts - Active");
    }
    static void ModifyPrimalUnit(Entity entity, bool isGateBoss = false)
    {
        if (isGateBoss)
            entity.TryApplyBuffWithLifeTimeNone(_bloodRainBuff);

        SetLevel(entity, isGateBoss);
        SetAttackSpeed(entity);
        SetHealth(entity);
        SetPower(entity, isGateBoss);
        SetMoveSpeed(entity);
    }
    static void SetLevel(Entity entity, bool isGateBoss)
    {
        int modifier = isGateBoss ? Constants.BOSS_LVL : Constants.UNIT_LVL;

        entity.With((ref UnitLevel unitLevel) => unitLevel.Level._Value += modifier);
    }
    static void SetAttackSpeed(Entity entity)
    {
        float modifier = entity.IsDreadful() ? Constants.HIGH_AMP : Constants.LOW_AMP;

        entity.With((ref AbilityBar_Shared abilityBarShared) =>
        {
            abilityBarShared.AbilityAttackSpeed._Value *= modifier;
            abilityBarShared.PrimaryAttackSpeed._Value *= modifier;
        });
    }
    static void SetHealth(Entity entity)
    {
        entity.With((ref Health health) =>
        {
            health.MaxHealth._Value *= Constants.HEALTH_AMP;
            health.Value = health.MaxHealth._Value;
        });
    }
    static void SetPower(Entity entity, bool isGateBoss)
    {
        entity.With((ref UnitStats unitStats) =>
        {
            unitStats.PhysicalPower._Value *= Constants.HIGH_AMP;
            unitStats.SpellPower._Value *= Constants.HIGH_AMP;
            unitStats.FireResistance._Value = isGateBoss ? 1 : unitStats.FireResistance._Value;
        });

        if (isGateBoss)
        {
            entity.HasWith((ref ResistanceData resistanceData) =>
            {
                resistanceData.FireResistance_DamageReductionPerRating = 100f;
                resistanceData.FireResistance_RedcuedIgiteChancePerRating = 100f;
            });
        }
    }
    static void SetMoveSpeed(Entity entity)
    {
        entity.With((ref AiMoveSpeeds aiMoveSpeeds) =>
        {
            aiMoveSpeeds.Walk._Value *= Constants.MED_AMP;
            aiMoveSpeeds.Run._Value *= Constants.MED_AMP;
            aiMoveSpeeds.Circle._Value *= Constants.MED_AMP;
        });
    }

}

/*
public static void AddUnitToCompEnd(PrefabGUID prefabGuid)
{
    var unitBuffer = entityManager.GetBuffer<UnitCompositionGroupUnitEntry>(ucEntity);
    var groupBuffer = entityManager.GetBuffer<UnitCompositionGroupEntry>(ucEntity);

    unitBuffer.Add(new UnitCompositionGroupUnitEntry
    {
        Unit = unitGuid,
        IsVBloodUnit = false,
        CustomVBloodUnit = default,
        // UnitBaseStatsType = UnitBaseStatsType.Normal
    });

    var last = groupBuffer.Length--;
    var entry = groupBuffer[last];

    entry.UnitsCount++;
    groupBuffer[last] = entry;
}
*/