name: Build

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Discover .csproj
        id: discover_csproj
        run: |
          # Find the first .csproj outside bin/obj directories.
          # Adjust if you have multiple .csproj files.
          csproj_file=$(find . -type f -name '*.csproj' \
            -not -path '*/bin/*' \
            -not -path '*/obj/*' | head -n 1)
          
          echo "csproj_file=$csproj_file" >> $GITHUB_OUTPUT
        
      - name: Get DLL name
        id: get_dll_name
        run: |
          csproj="${{ steps.discover_csproj.outputs.csproj_file }}"
          dll_name=$(basename "$csproj" .csproj)
          echo "dll_name=$dll_name" >> $GITHUB_OUTPUT

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Extract version from .csproj
        id: extract_version
        run: |
          version=$(xmllint --xpath "string(//Project/PropertyGroup/Version)" "${{ steps.discover_csproj.outputs.csproj_file }}")
          echo "version=$version" >> $GITHUB_ENV

      - name: Determine build eligibility
        id: version_guard
        run: |
          if [ -z "${{ env.version }}" ]; then
            echo "Unable to determine current version; continuing build to avoid false negative."
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual dispatch detected; proceeding with build regardless of version guard."
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          git fetch --force --tags
          latest_tag=$(git tag -l 'v*' --sort=-v:refname | head -n 1)
          latest_version=${latest_tag#v}

          current_version="${{ env.version }}"

          if [ -z "$latest_version" ]; then
            echo "No previous tagged release detected; proceeding with build."
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "$current_version" = "$latest_version" ]; then
            echo "Current .csproj version $current_version matches latest release; skipping build on push to main."
            echo "should_build=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          highest_version=$(printf '%s\n' "$latest_version" "$current_version" | sort -V | tail -n 1)

          if [ "$highest_version" = "$current_version" ]; then
            echo "Current .csproj version $current_version is ahead of latest release $latest_version; proceeding with build."
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "Current .csproj version $current_version is behind the latest release $latest_version; skipping build on push to main."
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup .NET
        if: steps.version_guard.outputs.should_build == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        if: steps.version_guard.outputs.should_build == 'true' || github.event_name == 'workflow_dispatch'
        run: dotnet restore

      - name: Update thunderstore.toml
        if: steps.version_guard.outputs.should_build == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          if [ -z "${{ env.version }}" ]; then
            echo "Version is empty; skipping thunderstore.toml update."
            exit 0
          fi

          sed -i "s/versionNumber = \".*\"/versionNumber = \"${{ env.version }}\"/" thunderstore.toml

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          if [ -n "$(git status --porcelain thunderstore.toml)" ]; then
            git add thunderstore.toml
            git commit -m "chore: Update thunderstore.toml version to ${{ env.version }}"
            git push origin HEAD:${{ github.ref }}
          else
            echo "No changes to commit in thunderstore.toml"
          fi

      - name: Build (Release)
        if: steps.version_guard.outputs.should_build == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          if [ -n "${{ env.version }}" ]; then
            dotnet build . --configuration Release -p:Version=${{ env.version }} -p:RunGenerateREADME=false
          else
            dotnet build . --configuration Release -p:RunGenerateREADME=false
          fi

      - name: GH Release (pre-release)
        uses: softprops/action-gh-release@v1
        if: (steps.version_guard.outputs.should_build == 'true' || github.event_name == 'workflow_dispatch') && env.version != ''
        with:
          body: |
            Automated pre-release for version ${{ env.version }} generated from this GitHub Actions build.
            - Commit: ${{ github.sha }}
            - Run: ${{ github.run_id }}
          name: Pre-release v${{ env.version }}
          fail_on_unmatched_files: true
          prerelease: true
          tag_name: v${{ env.version }}-pre
          files: |
            ./bin/Release/net6.0/${{ steps.get_dll_name.outputs.dll_name }}.dll
            CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
