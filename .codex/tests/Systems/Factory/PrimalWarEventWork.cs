using System;
using Bloodcraft.Systems;
using ProjectM;
using ProjectM.Shared.WarEvents;
using Unity.Transforms;

namespace Bloodcraft.Tests.Systems.Factory;

/// <summary>
/// Provides a test work definition mirroring the <see cref="PrimalWarEventSystem"/> setup behaviour.
/// </summary>
public readonly struct PrimalWarEventWork : ISystemWork
{
    /// <summary>
    /// Capacity used when allocating the handled-entity set.
    /// </summary>
    public const int HandledEntitySetCapacity = 512;

    static QueryDescription CreatePortalQuery()
    {
        var builder = new TestEntityQueryBuilder();
        builder.AddAllReadOnly<WarEvent_ActivePortal>();
        builder.AddAllReadOnly<WarEvent_ActiveUnit>();
        builder.WithOptions(EntityQueryOptions.IncludeDisabled);
        return builder.Describe(requireForUpdate: true);
    }

    static readonly QueryDescription portalQuery = CreatePortalQuery();

    /// <summary>
    /// Gets the portal query description used by the work.
    /// </summary>
    public QueryDescription PortalQuery => portalQuery;

    /// <inheritdoc />
    public void DescribeQuery(out ComponentType[] all, out ComponentType[] any, out ComponentType[] none, out EntityQueryOptions options)
    {
        var builder = new TestEntityQueryBuilder();
        builder.AddAllReadOnly<WarEvent_ActiveGate>();
        builder.AddAllReadOnly<WarEvent_ActiveUnit>();
        builder.WithOptions(EntityQueryOptions.IncludeDisabled);
        builder.Describe(out all, out any, out none, out options);
    }

    /// <inheritdoc />
    public void Setup(IRegistrar registrar, in SystemContext context)
    {
        if (registrar == null)
            throw new ArgumentNullException(nameof(registrar));

        registrar.Register(facade =>
        {
            _ = facade.GetEntityTypeHandle();
            _ = facade.GetEntityStorageInfoLookup();
            _ = facade.GetComponentLookup<VBloodUnit>(isReadOnly: true);
            _ = facade.GetComponentLookup<Translation>(isReadOnly: true);
            _ = facade.GetComponentTypeHandle<WarEvent_ActiveGate>(isReadOnly: true);
            _ = facade.GetComponentTypeHandle<WarEvent_ActivePortal>(isReadOnly: true);
            _ = facade.GetBufferTypeHandle<WarEvent_ActiveUnit>(isReadOnly: true);
        });
    }

    /// <inheritdoc />
    public void Tick(in SystemContext context)
    {
    }
}
