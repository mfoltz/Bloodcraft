using System;
using Bloodcraft.Systems;
using ProjectM;
using ProjectM.Shared.WarEvents;
using Unity.Transforms;

namespace Bloodcraft.Tests.Systems.Factory;

/// <summary>
/// Provides a test work definition mirroring the <see cref="PrimalWarEventSystem"/> setup behaviour.
/// </summary>
public sealed class PrimalWarEventWork : ISystemWork
{
    /// <summary>
    /// Delegate invoked for every active gate processed by the system.
    /// </summary>
    /// <param name="gate">Gate entity handle that should be evaluated.</param>
    public delegate void ActiveGateProcessor(EntityHandle gate);

    /// <summary>
    /// Delegate invoked for every active portal discovered by the system.
    /// </summary>
    /// <param name="portal">Portal entity handle that should be evaluated.</param>
    public delegate void ActivePortalProcessor(EntityHandle portal);

    /// <summary>
    /// Capacity used when allocating the handled-entity set.
    /// </summary>
    public const int HandledEntitySetCapacity = 512;

    static QueryDescription CreatePortalQuery()
    {
        var builder = new TestEntityQueryBuilder();
        builder.AddAllReadOnly<WarEvent_ActivePortal>();
        builder.AddAllReadOnly<WarEvent_ActiveUnit>();
        builder.WithOptions(EntityQueryOptions.IncludeDisabled);
        return builder.Describe(requireForUpdate: true);
    }

    static readonly QueryDescription portalQuery = CreatePortalQuery();

    /// <summary>
    /// Gets the portal query description used by the work.
    /// </summary>
    public QueryDescription PortalQuery => portalQuery;

    readonly ActiveGateProcessor? gateProcessor;
    readonly ActivePortalProcessor? portalProcessor;

    /// <summary>
    /// Initializes a new instance of the <see cref="PrimalWarEventWork"/> class.
    /// </summary>
    public PrimalWarEventWork()
        : this(null, null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="PrimalWarEventWork"/> class.
    /// </summary>
    /// <param name="gateProcessor">Callback invoked when processing active gates.</param>
    /// <param name="portalProcessor">Callback invoked when processing active portals.</param>
    public PrimalWarEventWork(ActiveGateProcessor? gateProcessor, ActivePortalProcessor? portalProcessor)
    {
        this.gateProcessor = gateProcessor;
        this.portalProcessor = portalProcessor;
    }

    /// <inheritdoc />
    public void Build(TestEntityQueryBuilder builder)
    {
        if (builder == null)
            throw new ArgumentNullException(nameof(builder));

        builder.AddAllReadOnly<WarEvent_ActiveGate>();
        builder.AddAllReadOnly<WarEvent_ActiveUnit>();
        builder.WithOptions(EntityQueryOptions.IncludeDisabled);
    }

    /// <inheritdoc />
    public void OnCreate(SystemContext context)
    {
        var registrar = context.Registrar;

        registrar.Register(static (ISystemFacade facade) =>
        {
            _ = facade.GetEntityTypeHandle();
            _ = facade.GetEntityStorageInfoLookup();
            _ = facade.GetComponentLookup<VBloodUnit>(isReadOnly: true);
            _ = facade.GetComponentLookup<Translation>(isReadOnly: true);
            _ = facade.GetComponentTypeHandle<WarEvent_ActiveGate>(isReadOnly: true);
            _ = facade.GetComponentTypeHandle<WarEvent_ActivePortal>(isReadOnly: true);
            _ = facade.GetBufferTypeHandle<WarEvent_ActiveUnit>(isReadOnly: true);
        });
    }

    /// <inheritdoc />
    public void OnUpdate(SystemContext context)
    {
        if (gateProcessor != null)
        {
            context.ForEachEntity(context.Query, gateProcessor.Invoke);
        }

        if (portalProcessor != null)
        {
            context.ForEachEntity(PortalQuery, portalProcessor.Invoke);
        }
    }
}
