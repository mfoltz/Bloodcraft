using Il2CppInterop.Runtime;
using ProjectM;
using ProjectM.AimPreviewSplines.Component;
using ProjectM.Audio;
using ProjectM.Behaviours;
using ProjectM.CastleBuilding;
using ProjectM.CastleBuilding.AssetSwapping;
using ProjectM.CastleBuilding.Items;
using ProjectM.CastleBuilding.Placement;
using ProjectM.CastleBuilding.Rebuilding;
using ProjectM.Community;
using ProjectM.Debugging;
using ProjectM.Gameplay;
using ProjectM.Gameplay.Clan;
using ProjectM.Gameplay.Scripting;
using ProjectM.Gameplay.Systems;
using ProjectM.Gameplay.WarEvents;
using ProjectM.Haptics;
using ProjectM.HUD;
using ProjectM.Hybrid;
using ProjectM.LightningStorm;
using ProjectM.Network;
using ProjectM.Pathfinding;
using ProjectM.Physics;
using ProjectM.Presentation;
using ProjectM.Replays;
using ProjectM.Roofs;
using ProjectM.Scripting;
using ProjectM.Sequencer;
using ProjectM.Sequencer.Debugging;
using ProjectM.Shared;
using ProjectM.Shared.Systems;
using ProjectM.Shared.WarEvents;
using ProjectM.Shared.WorldEvents;
using ProjectM.SunBlocker;
using ProjectM.Terrain;
using ProjectM.Terrain.Editor;
using ProjectM.Tiles;
using ProjectM.Transmog;
using ProjectM.UI;
using ProjectM.Wind;
using Stunlock.Core;
using Stunlock.Core.Authoring;
using Stunlock.Sequencer;
using System.Collections;
using Terrain.Systems;
using Tests;
using Unity.Collections;
using Unity.Deformations;
using Unity.Entities;
using Unity.Entities.Graphics;
using Unity.Entities.Graphics.Extension;
using Unity.Entities.Hybrid.Baking;
using Unity.Entities.Serialization;
using Unity.Physics;
using Unity.Physics.Authoring;
using Unity.Physics.GraphicsIntegration;
using Unity.Physics.Systems;
using Unity.Rendering;
using Unity.Scenes;
using Unity.Transforms;
using static Bloodcraft.Utilities.EntityQueries;

namespace Bloodcraft.Utilities;
internal static class EntityQueries
{
    static EntityManager EntityManager => Core.EntityManager;
    static EntityTypeHandle EntityTypeHandle => EntityManager.GetEntityTypeHandle();
    static EntityStorageInfoLookup EntityStorageInfoLookup => EntityManager.GetEntityStorageInfoLookup();
    public abstract class ComponentHandleBase
    {
        public abstract TypeIndex TypeIndex { get; }
        public abstract object GetValueAt(ArchetypeChunk chunk, int index);
    }
    public class ComponentHandle<T> : ComponentHandleBase where T : unmanaged
    {
        public override TypeIndex TypeIndex => new ComponentType(Il2CppType.Of<T>()).TypeIndex;
        public override object GetValueAt(ArchetypeChunk chunk, int index)
        {
            var handle = EntityManager.GetComponentTypeHandle<T>(true);

            if (!chunk.Has(ref handle))
            {
                return default(T);
            }

            var array = chunk.GetNativeArray(ref handle);
            return array[index];
        }
    }

    /*
    public class ComponentHandle<T> : ComponentHandleBase where T : unmanaged
    {
        ComponentTypeHandle<T> _cachedHandle;
        bool _isValid;
        public void ResolveHandle()
        {
            _cachedHandle = EntityManager.GetComponentTypeHandle<T>(true);
            _isValid = true;
        }
        public override object GetValueAt(ArchetypeChunk chunk, int index)
        {
            if (!_isValid) ResolveHandle();

            if (!chunk.Has(ref _cachedHandle))
                return default(T);

            return chunk.GetNativeArray(ref _cachedHandle)[index];
        }
        public override TypeIndex TypeIndex => new ComponentType(Il2CppType.Of<T>()).TypeIndex;
    }
    */
    public readonly struct QueryDesc(EntityQuery entityQuery, ComponentType[] types, int[] indices)
    {
        public EntityQuery EntityQuery { get; } = entityQuery;
        public ComponentType[] ComponentTypes { get; } = types;
        public int[] TypeIndices { get; } = indices;
    }
    public readonly struct QueryResult(Entity entity, ComponentType[] componentTypes, object[] componentData)
    {
        public readonly Entity Entity = entity;
        public readonly ComponentType[] ComponentTypes = componentTypes;
        public readonly object[] ComponentData = componentData;
    }
    public readonly struct QueryResultStream : IDisposable
    {
        public readonly NativeArray<ArchetypeChunk> ArchetypeChunks;
        public readonly EntityTypeHandle EntityHandle;
        public readonly EntityStorageInfoLookup EntityStorage;
        public readonly ComponentType[] ComponentTypes;
        public readonly ComponentHandleBase[] ComponentHandles;
        public QueryResultStream(NativeArray<ArchetypeChunk> chunks, ComponentType[] types, int[] indices)
        {
            ArchetypeChunks = chunks;
            EntityHandle = EntityTypeHandle;
            EntityStorage = EntityStorageInfoLookup;

            ComponentTypes = new ComponentType[indices.Length];
            ComponentHandles = new ComponentHandleBase[indices.Length];

            for (int i = 0; i < indices.Length; i++)
            {
                ComponentTypes[i] = types[indices[i]];
                ComponentHandles[i] = ComponentRegistry.GetHandle(ComponentTypes[i].TypeIndex);
            }
        }
        public IEnumerable<QueryResult> GetResults()
        {
            int chunkIndex = 0;

            foreach (var chunk in ArchetypeChunks)
            {
                QueryResult[] results = null;

                try
                {
                    results = ProcessChunk(chunk);
                }
                catch (Exception)
                {
                   // Core.Log.LogWarning($"[QueryResultStream] Skipping chunkIndex - {chunkIndex}");
                }

                if (results != null)
                {
                    foreach (var result in results)
                        yield return result;
                }

                chunkIndex++;
            }
        }
        QueryResult[] ProcessChunk(ArchetypeChunk chunk)
        {
            var entities = chunk.GetNativeArray(EntityTypeHandle);
            var results = new List<QueryResult>(chunk.Count);

            for (int i = 0; i < chunk.Count; i++)
            {
                var entity = entities[i];

                if (!EntityStorage.Exists(entity))
                    continue;

                object[] data = new object[ComponentHandles.Length];
                for (int j = 0; j < ComponentHandles.Length; j++)
                {
                    data[j] = ComponentHandles[j].GetValueAt(chunk, i);
                }

                results.Add(new QueryResult(entity, ComponentTypes, data));
            }

            return [..results];
        }
        public void Dispose()
        {
            if (ArchetypeChunks.IsCreated) ArchetypeChunks.Dispose();
        }
    }
    public static IEnumerator QueryResultStreamAsync(
    QueryDesc queryDesc,
    Action<QueryResultStream> onReady)
    {
        EntityQuery entityQuery = queryDesc.EntityQuery;
        ComponentType[] types = queryDesc.ComponentTypes;
        int[] indices = queryDesc.TypeIndices;

        var chunks = entityQuery.CreateArchetypeChunkArrayAsync(Allocator.TempJob, out var handle);

        while (!handle.IsCompleted)
            yield return null;

        handle.Complete();

        var stream = new QueryResultStream(chunks, types, indices);
        onReady?.Invoke(stream);
    }
    public static T ResolveComponentData<T>(this QueryResult result) where T : struct
    {
        int componentCount = result.ComponentTypes.Length;
        TypeIndex typeIndex = new ComponentType(Il2CppType.Of<T>()).TypeIndex;

        for (int i = 0; i < componentCount; i++)
        {
            if (result.ComponentTypes[i].TypeIndex.Equals(typeIndex))
            {
                return (T)result.ComponentData[i];
            }
        }

        return default;
    }
    public static QueryDesc CreateQueryDesc(
        this EntityManager entityManager,
        ComponentType[] allTypes,
        ComponentType[] anyTypes = null,
        ComponentType[] noneTypes = null,
        int[] typeIndices = null,
        EntityQueryOptions? options = default)
    {
        if (allTypes == null || allTypes.Length == 0)
            throw new ArgumentException("AllTypes must contain at least one component!", nameof(allTypes));

        var builder = new EntityQueryBuilder(Allocator.Temp);

        foreach (var componentType in allTypes)
            builder.AddAll(componentType);

        if (anyTypes != null)
        {
            foreach (var componentType in anyTypes)
                builder.AddAny(componentType);
        }

        if (noneTypes != null)
        {
            foreach (var componentType in noneTypes)
                builder.AddNone(componentType);
        }

        if (options.HasValue)
            builder.WithOptions(options.Value);

        var query = entityManager.CreateEntityQuery(ref builder);

        typeIndices ??= GenerateDefaultIndices(allTypes.Length);

        return new QueryDesc(query, allTypes, typeIndices);
    }
    static int[] GenerateDefaultIndices(int length)
    {
        var indices = new int[length];
        for (int i = 0; i < length; i++)
            indices[i] = i;
        return indices;
    }
    public static EntityQuery BuildEntityQuery(
    this EntityManager entityManager,
    ComponentType[] all)
    {
        var builder = new EntityQueryBuilder(Allocator.Temp);

        foreach (var componentType in all)
            builder.AddAll(componentType);

        return entityManager.CreateEntityQuery(ref builder);
    }
    public static EntityQuery BuildEntityQuery(
    this EntityManager entityManager,
    ComponentType[] all,
    EntityQueryOptions options)
    {
        var builder = new EntityQueryBuilder(Allocator.Temp);

        foreach (var componentType in all)
            builder.AddAll(componentType);

        builder.WithOptions(options);

        return entityManager.CreateEntityQuery(ref builder);
    }
    public static EntityQuery BuildEntityQuery(
    this EntityManager entityManager,
    ComponentType[] all,
    ComponentType[] none,
    EntityQueryOptions options)
    {
        var builder = new EntityQueryBuilder(Allocator.Temp);

        foreach (var componentType in all)
            builder.AddAll(componentType);

        foreach (var componentType in none)
            builder.AddNone(componentType);

        builder.WithOptions(options);

        return entityManager.CreateEntityQuery(ref builder);
    }
}
internal static class ComponentRegistry
{
    public static bool _initialized;

    static readonly Dictionary<TypeIndex, Type> _registeredTypes = [];
    public static void RegisterComponent<T>() where T : struct
    {
        ComponentType componentType = new(Il2CppType.Of<T>());
        _registeredTypes[componentType.TypeIndex] = typeof(T);
    }
    public static ComponentHandleBase GetHandle(TypeIndex typeIndex)
    {
        if (!_registeredTypes.TryGetValue(typeIndex, out var type))
            throw new InvalidOperationException($"No registered component type for index: {typeIndex}");

        var dynamicType = typeof(ComponentHandle<>).MakeGenericType(type);
        return (ComponentHandleBase)Activator.CreateInstance(dynamicType);
    }

    // KindredExtract component extractor saved significant amounts of time here, thank you Odjit <3 (honorable mention to Find&Replace)
    public static void Initialize()
    {
        RegisterComponent<Entity>();
        RegisterComponent<SubSwatchGuidData>();
        RegisterComponent<OffOnLowEntitiesBaking>();
        RegisterComponent<GraphEvent>();
        RegisterComponent<SequenceAsset>();
        RegisterComponent<EventStateElement>();
        RegisterComponent<CreateSequence>();
        RegisterComponent<DestroySequenceOnCompletion>();
        RegisterComponent<UsePullComponents>();
        RegisterComponent<TransformHierarchyEntitiesBaking>();
        RegisterComponent<BloodHuntsData>();
        RegisterComponent<BloodHuntBuffer>();
        RegisterComponent<ShardBossHuntBuffer>();
        RegisterComponent<Bonfire>();
        RegisterComponent<GameConnect>();
        RegisterComponent<PasswordGameConnect>();
        RegisterComponent<HailMessageStruct_Server>();
        RegisterComponent<CreateCharacterEventInternal>();
        RegisterComponent<ProjectM.BurnContainer>();
        RegisterComponent<AiPointOfInterestTarget>();
        RegisterComponent<CastleDecayAndRegen>();
        RegisterComponent<ChangeModelWhenDecaying>();
        RegisterComponent<DecayOnServerTick>();
        RegisterComponent<CastleInvulnerableBuff>();
        RegisterComponent<RegenOnServerTick>();
        RegisterComponent<CastleResistanceBuff>();
        RegisterComponent<VisualizeCastleRoomsSingleton>();
        RegisterComponent<DrawBloodFountainAnalysisSingleton>();
        RegisterComponent<DoorChildren>();
        RegisterComponent<CheckOnScreen>();
        RegisterComponent<CloudLight>();
        RegisterComponent<CloudCookie>();
        RegisterComponent<CombatMusicListener_Client>();
        RegisterComponent<CombatMusicListener_Shared>();
        RegisterComponent<CombatMusicSource_Server>();
        RegisterComponent<CombatMusicSource_Client>();
        RegisterComponent<CritterData>();
        RegisterComponent<CritterGroup>();
        RegisterComponent<CritterDataBuffer>();
        RegisterComponent<CritterSpawn>();
        RegisterComponent<Crowdedness>();
        RegisterComponent<CrowdednessPlayerBufferElement>();
        RegisterComponent<ShowCrowdedness>();
        RegisterComponent<ApplyBuffOnConsume>();
        RegisterComponent<DismantleDestroyData>();
        RegisterComponent<BlueprintDataBakingSystem.SetupData>();
        RegisterComponent<CastAbilityOnConsume>();
        RegisterComponent<CastleAreaRequirement>();
        RegisterComponent<CastOptionsUser>();
        RegisterComponent<Consumable>();
        RegisterComponent<ConsumableCondition>();
        RegisterComponent<DurabilityTarget>();
        RegisterComponent<HybridEquipment>();
        RegisterComponent<MissionData>();
        RegisterComponent<PerksBuffer>();
        RegisterComponent<RebuildBlueprintMapping>();
        RegisterComponent<RebuildTileModelMapping>();
        RegisterComponent<RepairData>();
        RegisterComponent<RepairRequirementBuffer>();
        RegisterComponent<RequiredProgressionToConsume>();
        RegisterComponent<SaddleData>();
        RegisterComponent<ServantTypeData>();
        RegisterComponent<ServantConvertRequirement>();
        RegisterComponent<ServantConnectedCoffin>();
        RegisterComponent<NPCServantColorIndex>();
        RegisterComponent<ServantHasItemsInInventory>();
        RegisterComponent<ServantBloodTypePerkElement>();
        RegisterComponent<ServantFactionPerkElement>();
        RegisterComponent<ServantPerkCollectionSingleton>();
        RegisterComponent<PassiveRequirementBuffer>();
        RegisterComponent<StaticWalkableTileData>();
        RegisterComponent<TraderCollectionGenerator>();
        RegisterComponent<TraderEntry>();
        RegisterComponent<TradeCost>();
        RegisterComponent<TradeOutput>();
        RegisterComponent<VBloodItemSource>();
        RegisterComponent<ShowAllTileCollision>();
        RegisterComponent<ShowDeadEndTilesResult>();
        RegisterComponent<ShowProjectedSunblockers>();
        RegisterComponent<DetachEntityFromSpawnerEvent>();
        RegisterComponent<RemoveEntityFromSpawnerEvent>();
        RegisterComponent<DownedEvent>();
        RegisterComponent<Forge_Shared>();
        // RegisterComponent<Forge_Client>();
        RegisterComponent<AbilityCastAimPreview>();
        RegisterComponent<AimPreviewOverrideRadius>();
        RegisterComponent<AimPreviewOverrideLength>();
        RegisterComponent<AimPreviewOverrideConeAngle>();
        RegisterComponent<AimPreviewOverrideQuadSize>();
        RegisterComponent<AbilityCastSequenceData>();
        RegisterComponent<AbilityDPS>();
        RegisterComponent<AbilityGroupConsumeItemOnCast>();
        RegisterComponent<AbilityGroupResetComboState>();
        RegisterComponent<AbilityGroupComboActive>();
        RegisterComponent<AbilityIgnoreSettings>();
        RegisterComponent<AbilityDirectionInaccuracy>();
        RegisterComponent<AbilityPositionInaccuracy>();
        RegisterComponent<AbilityPriority>();
        RegisterComponent<AbilityTarget>();
        RegisterComponent<AbilityTargetSource>();
        RegisterComponent<AimPreview>();
        RegisterComponent<AimPreviewKillOnCast>();
        RegisterComponent<AimPreviewDash>();
        RegisterComponent<AimPreviewGeneral>();
        RegisterComponent<AimPreviewMelee>();
        RegisterComponent<AimPreviewProjectile>();
        RegisterComponent<AimPreviewProjectileCursor>();
        RegisterComponent<AimPreviewProjectileCursorNoLine>();
        RegisterComponent<AimPreviewTargetAoE>();
        RegisterComponent<AimPreviewTravelBuff>();
        RegisterComponent<AimRotationParameters>();
        RegisterComponent<BuffAimPreview>();
        RegisterComponent<BuffInstantiatedAimPreview>();
        RegisterComponent<AbilityCastTimeData>();
        RegisterComponent<AbilityHoldToCastData>();
        RegisterComponent<ChangeKnockbackResistanceDuringCast>();
        RegisterComponent<AbilityChargeUpData>();
        RegisterComponent<ChargeUpSpell>();
        RegisterComponent<HideWeapon>();
        RegisterComponent<HideWeaponDuringCast>();
        RegisterComponent<ModifyMovementDuringCastState>();
        RegisterComponent<MoveStopTrigger>();
        RegisterComponent<ProfessorCoil>();
        RegisterComponent<ProfessorCoilBeam_Data_Server>();
        RegisterComponent<ProfessorCoilBeam_Client>();
        RegisterComponent<ProfessorCoilBeam_State_Server>();
        RegisterComponent<ProfessorCoilBeam_State_Shared>();
        RegisterComponent<ProfessorCoilManager>();
        RegisterComponent<ProfessorCoilElement>();
        RegisterComponent<ProfessorCoilPairElement>();
        RegisterComponent<ProfessorCoilEvent>();
        RegisterComponent<ProfessorCoilEvent_Random>();
        RegisterComponent<ProfessorCoilEvent_PredefinedSequence>();
        RegisterComponent<ProfessorCoilEvent_SpawnTag>();
        RegisterComponent<AbilityRemoveBuffCategoryOnStartCast>();
        RegisterComponent<RotateTowardsAimDirectionDuringCastActive>();
        RegisterComponent<RotateTowardsAimDirectionDuringCastData>();
        RegisterComponent<AbilitySpawnPrefabOnStartCast>();
        RegisterComponent<DestroyOnOwnerDeath>();
        RegisterComponent<DestroyOnSpawn>();
        RegisterComponent<GetOwnerFactionOnSpawn>();
        RegisterComponent<GetOwnerRotation>();
        RegisterComponent<GetOwnerRotationOnlyOnSpawnTag>();
        RegisterComponent<GetOwnerTeamOnSpawn>();
        RegisterComponent<GetTranslationAlongPatrolOnSpawn>();
        RegisterComponent<GetTranslationOnSpawn>();
        RegisterComponent<OffsetTranslationOnSpawn>();
        RegisterComponent<OffsetLastTranslationOnSpawn>();
        RegisterComponent<OffsetTranslationOnSpawnBlockerSettings>();
        RegisterComponent<GetTranslationOnUpdate>();
        RegisterComponent<TiltTowardGameplayLocationOnSpawn>();
        RegisterComponent<AchievementData>();
        RegisterComponent<AchievementSubTaskEntry>();
        RegisterComponent<AchievementInProgressElement>();
        RegisterComponent<AchievementClaimedElement>();
        RegisterComponent<AchievementOwner>();
        RegisterComponent<AchievementSubTaskData>();
        RegisterComponent<ProgressAchievementEvent>();
        RegisterComponent<GiveAchievementOnHit>();
        RegisterComponent<GiveAchievementOnItemCraft>();
        RegisterComponent<ProgressAchievementOnItemGain>();
        RegisterComponent<GiveAchievementOnKill>();
        RegisterComponent<GiveAchievementOnSpawn>();
        RegisterComponent<ProgressAchievementEventV2>();
        RegisterComponent<AdminUser>();
        RegisterComponent<AnimationStateBuffer>();
        RegisterComponent<AreaSequence>();
        RegisterComponent<Attached>();
        RegisterComponent<AttachParentId>();
        RegisterComponent<AttachedDepth>();
        RegisterComponent<AttachParentIdData>();
        RegisterComponent<BagEquipBuffTag>();
        RegisterComponent<BlockEquipmentSwapping>();
        RegisterComponent<Script_BloodAltar_TrackVBloodUnit_Shared>();
        RegisterComponent<BuffByItemCategoryCount>();
        RegisterComponent<AbsorbBuff>();
        RegisterComponent<AbsorbStackModifier>();
        RegisterComponent<AbsorbCapStackModifier>();
        RegisterComponent<MultiplyAbsorbCapBySpellPower>();
        RegisterComponent<IncreaseAbsorbCapByMaxHealth>();
        RegisterComponent<SiegeWeaponAbsorbCapByServerSettings>();
        RegisterComponent<BlockHealBuff>();
        RegisterComponent<BuffOnConnectionStatusElement>();
        RegisterComponent<DeathBuff>();
        RegisterComponent<DestroyBuffOnDamageTaken>();
        RegisterComponent<DestroyBuffOnMove>();
        RegisterComponent<DisableFootsteps>();
        RegisterComponent<FortifyBuff>();
        RegisterComponent<HealingBuff>();
        RegisterComponent<Interactable>();
        RegisterComponent<InteractedUpon>();
        RegisterComponent<InteractableSequence>();
        RegisterComponent<EndInteractableSequence>();
        RegisterComponent<InteractableActive>();
        RegisterComponent<InteractableWasActive>();
        RegisterComponent<InteractAbilityBuffer>();
        RegisterComponent<Interactor>();
        RegisterComponent<ModifyInventorySizeBuff>();
        RegisterComponent<ModifyInventorySizeEvent>();
        RegisterComponent<BagEquipUpdateBuffByItemCategoryCountEvent>();
        RegisterComponent<ModifyMovementSpeedBuff>();
        RegisterComponent<ModifyMovementSpeedBuffModification>();
        RegisterComponent<MovementSpeedStackModifier>();
        RegisterComponent<ModifyTeamBuff>();
        RegisterComponent<MoveWithCurveSystem.Singleton>();
        RegisterComponent<PreviewPlacementBuff>();
        RegisterComponent<PreviewPlacementSequence>();
        RegisterComponent<RemapAbilitySlotsForGamepadBuff>();
        // RegisterComponent<ServerControlsPositionBuff>();
        RegisterComponent<ServerControlsPositionModifications>();
        RegisterComponent<SpawnSleepingBuff>();
        RegisterComponent<TravelBuffCollection>();
        RegisterComponent<TravelToTarget>();
        RegisterComponent<TravelToTargetRadius>();
        RegisterComponent<ZoomModifierArea>();
        RegisterComponent<ZoomModifierBuff>();
        RegisterComponent<ChangeKnockbackResistanceBuff>();
        RegisterComponent<ChangeKnockbackResistanceBuffModification>();
        RegisterComponent<ServerSystemChatMessage>();
        RegisterComponent<CreateEventOnHealthChangeAmount>();
        RegisterComponent<CustomPreviewUpdate>();
        RegisterComponent<DeadSequence>();
        RegisterComponent<DestroyOnAbilityCast>();
        RegisterComponent<DelayedDestroyTagEvents>();
        RegisterComponent<ProcessDestroyEventDebugging>();
        RegisterComponent<DisableAggroBuff>();
        RegisterComponent<DisableAggroBuffModifications>();
        RegisterComponent<DisableHeightCorrectionDuringCast>();
        RegisterComponent<DisableHeightCorrectionDuringCastModificationData>();
        RegisterComponent<DismantleAbility>();
        RegisterComponent<DismantleEvent>();
        RegisterComponent<DynamicCollision>();
        RegisterComponent<FadeOutFlyMoodBuff>();
        RegisterComponent<FollowBuffOwner>();
        RegisterComponent<FollowBuffOwnerModifications>();
        RegisterComponent<GallopBuff>();
        RegisterComponent<GallopBuffModifications>();
        RegisterComponent<CreateGameplayEventsOnAbilityImpaired>();
        RegisterComponent<CreateGameplayEventsOnAbilityTrigger>();
        RegisterComponent<CreateGameplayEventsOnAbilityTriggerAbilityPrefabTargets>();
        RegisterComponent<CreateGameplayEventOnBehaviourStateChanged>();
        RegisterComponent<CreateGameplayEventOnBuffReapply>();
        RegisterComponent<CreateGameplayEventOnDamageTaken>();
        RegisterComponent<CreateGameplayEventOnDeath>();
        RegisterComponent<DamageTakenEvent>();
        RegisterComponent<CreateGameplayEventsOnDestroy>();
        RegisterComponent<CreateGameplayEventOnDistanceReached>();
        RegisterComponent<CreateGameplayEventsOnHit>();
        RegisterComponent<CreateGameplayEventOnItemEquipped>();
        RegisterComponent<CreateGameplayEventOnKill>();
        RegisterComponent<CreateGameplayEventOnLeaveCliff>();
        RegisterComponent<CreateGameplayEventOnMinionDeath>();
        RegisterComponent<CreateGameplayEventsOnSpawn>();
        RegisterComponent<CreateGameplayEventsOnTick>();
        RegisterComponent<CreateGameplayEventsOnTimePassed>();
        RegisterComponent<CreateGameplayEventsOnHitConsume>();
        RegisterComponent<CreateGameplayEventsOnHitConsume_SpellsConsumed>();
        RegisterComponent<AdjustCurrentChargesOnGameplayEvent>();
        RegisterComponent<AdjustCurrentCooldownOnGameplayEvent>();
        RegisterComponent<AdjustLifetimeOnGameplayEvent>();
        RegisterComponent<ApplyBuffOnGameplayEvent>();
        RegisterComponent<ApplyKnockbackOnGameplayEvent>();
        RegisterComponent<ChangeAbilityOnGameplayEvent>();
        RegisterComponent<ChangeBloodOnGameplayEvent>();
        // RegisterComponent<ChangeEnergyOnGameplayEvent>();
        RegisterComponent<ClearAggroOnGameplayEvent>();
        RegisterComponent<ConsumeBuffOnGameplayEvent>();
        RegisterComponent<DestroyOnGameplayEvent>();
        RegisterComponent<DropFromTablesOnGameplayEvent>();
        RegisterComponent<ForceCastOnGameplayEvent>();
        RegisterComponent<GenerateAggroOnGameplayEvent>();
        RegisterComponent<HealOnGameplayEvent>();
        RegisterComponent<LifeLeechOnGameplayEvent>();
        RegisterComponent<LifeLeechEvent>();
        RegisterComponent<ModifyItemDurabilityOnGameplayEvent>();
        RegisterComponent<GameplayEventIdMapping>();
        RegisterComponent<PlayBlinkSequenceOnGameplayEvent>();
        RegisterComponent<PlayImpactOnGameplayEvent>();
        RegisterComponent<PlaySequenceOnGameplayEvent>();
        RegisterComponent<PlaySequenceOnTargetOnDamageTaken>();
        RegisterComponent<RemoveBuffOnGameplayEvent>();
        RegisterComponent<RemoveBuffOnGameplayEventEntry>();
        RegisterComponent<RunScriptOnGameplayEvent>();
        RegisterComponent<SpawnMinionOnGameplayEvent>();
        RegisterComponent<SpawnPrefabOnGameplayEvent>();
        RegisterComponent<StopSpellMovementOnGameplayEvent>();
        // RegisterComponent<TriggerCounterOnGameplayEvent>();
        // RegisterComponent<CounterTriggerEvent>();
        RegisterComponent<TriggerHitConsume>();
        RegisterComponent<UnlockTrophyOnGameplayEvent>();
        RegisterComponent<YieldResourceDisable>();
        RegisterComponent<YieldResourcesOnDamageTaken>();
        RegisterComponent<Handled>();
        RegisterComponent<YieldResourcesOnPickup>();
        RegisterComponent<YieldResourceSource>();
        RegisterComponent<GrabBuff>();
        RegisterComponent<ControllerVibrationData>();
        RegisterComponent<HasResidentBuff>();
        RegisterComponent<AllowJumpFromCliffsBuff>();
        RegisterComponent<Height>();
        RegisterComponent<JumpFromCliffs>();
        RegisterComponent<JumpFromCliffsTravelBuff>();
        RegisterComponent<JumpFromCliffsTravelBuffConstants>();
        RegisterComponent<ProjectileSnapToHeight>();
        RegisterComponent<ShowHeight>();
        RegisterComponent<SnapToHeight>();
        RegisterComponent<HideOutsideVision>();
        RegisterComponent<HitColliderCast.CollisionCastOnSpawn>();
        RegisterComponent<HitColliderCast.CollisionCastOnUpdate>();
        RegisterComponent<HitColliderCast.CollisionCastOnDestroy>();
        RegisterComponent<HitColliderCast>();
        RegisterComponent<ImprisonedBuff>();
        RegisterComponent<InsideBuff>();
        RegisterComponent<InsideInitBuff>();
        RegisterComponent<ActivateDraculaWarpRift>();
        RegisterComponent<AdditionalInteractBuff>();
        RegisterComponent<BindCoffin>();
        RegisterComponent<BloodConsumeDebuff>();
        RegisterComponent<NameableInteractable>();
        RegisterComponent<OpenDoor>();
        RegisterComponent<InteractPickup>();
        RegisterComponent<RespawnDelay>();
        RegisterComponent<SelectStartGraveyard>();
        RegisterComponent<SpellTarget>();
        RegisterComponent<InteractBuff>();
        RegisterComponent<UseCastleHeart>();
        RegisterComponent<UseMirror>();
        RegisterComponent<UseRelicRadar>();
        RegisterComponent<UseNoctemRadar>();
        RegisterComponent<UseThrone>();
        RegisterComponent<UseWaypoint>();
        RegisterComponent<BagHolderBakingStuff>();
        RegisterComponent<ChunkDataRemappings>();
        RegisterComponent<CrowdednessDropTableSettingsAsset.CrowdednessSetting>();
        RegisterComponent<Description>();
        RegisterComponent<DestroyAfterTimeOnInventoryChange>();
        RegisterComponent<DestroyWhenDisabled>();
        RegisterComponent<DestroyWhenInventoryIsEmpty>();
        RegisterComponent<DestroyWhenNoCharacterNearbyAfterDuration>();
        RegisterComponent<DropInInventoryOnSpawn>();
        RegisterComponent<DropItemThrowSystem.DropItem>();
        RegisterComponent<ItemEquipEventData>();
        RegisterComponent<EquipmentSetBuff>();
        RegisterComponent<ItemPickup>();
        RegisterComponent<PlayerDeathContainer>();
        RegisterComponent<ShrinkInventoryWhenWithdrawn>();
        RegisterComponent<TransitionWhenInventoryIsEmpty>();
        RegisterComponent<LegDirection_Server>();
        RegisterComponent<LegDirection_Shared>();
        RegisterComponent<LimitAbilityPriorityBuff>();
        RegisterComponent<LimitAbilityPriorityModifications>();
        RegisterComponent<CameraRequest>();
        RegisterComponent<MegaStaticManager>();
        RegisterComponent<MegaStaticPrefabBuffer>();
        RegisterComponent<MegaStaticDestroyedBuffer>();
        RegisterComponent<MegaStaticInstanceBuffer>();
        RegisterComponent<MegaStaticServerInstanceBuffer>();
        RegisterComponent<AffectPrisonerWithToxic>();
        RegisterComponent<AllyPermission>();
        RegisterComponent<AoETargetImportance>();
        RegisterComponent<BloodQualityBuff>();
        RegisterComponent<DayNightCycleComponent.DataClient>();
        RegisterComponent<DealDamageToPrisoner>();
        RegisterComponent<EmoteAbility>();
        RegisterComponent<EquipmentSound>();
        RegisterComponent<FeedPrisoner>();
        RegisterComponent<IgnoreInCombatBuff>();
        RegisterComponent<InCombatBuff>();
        RegisterComponent<IncreaseConsumableBloodQuality>();
        RegisterComponent<LocalRagdollImpulse>();
        RegisterComponent<ModifyAIMoveSpeedsBuff>();
        RegisterComponent<ModifyBloodDrainBuff>();
        RegisterComponent<ModifyConsumeBloodTypeBuff>();
        RegisterComponent<ModifyDropTableBuff>();
        RegisterComponent<ModifyEntityCategoryBuff>();
        RegisterComponent<ModifyImpactMaterialBuff>();
        RegisterComponent<ModifyVoiceBuff>();
        RegisterComponent<ShapeshiftAbility>();
        RegisterComponent<ShowSunDamageRays>();
        RegisterComponent<StoredBloodAbility>();
        RegisterComponent<StoredBlood>();
        RegisterComponent<StoredConsumeCount>();
        RegisterComponent<Sun>();
        RegisterComponent<Torture>();
        RegisterComponent<UseCombatAnimationState>();
        RegisterComponent<VampireTag>();
        RegisterComponent<VbloodGhostBuff_Shared>();
        RegisterComponent<VbloodGhostBuff_Client>();
        RegisterComponent<CharacterVoiceActivity>();
        RegisterComponent<ModifyAggroRangesBuff>();
        RegisterComponent<ModifyAggroRangesBuffModifications>();
        RegisterComponent<ModifyObstacleFadeoutBuff>();
        RegisterComponent<ModifyObstacleFadeoutModifications>();
        RegisterComponent<MountModelStreaming>();
        RegisterComponent<Mountable>();
        RegisterComponent<MountInitBuff>();
        RegisterComponent<MoveTowardsPositionBuff_PathElement>();
        RegisterComponent<MoveTowardsPositionBuff>();
        RegisterComponent<MoveTowardsRotationBuff>();
        RegisterComponent<PlaySequenceOnDeath>();
        RegisterComponent<PlaySequenceOnDestroy>();
        RegisterComponent<PlaySequenceOnPickup>();
        RegisterComponent<YieldEssenceOnDeath>();
        RegisterComponent<OpenDoors>();
        RegisterComponent<OpenDoorsBuffer>();
        RegisterComponent<PerkData>();
        RegisterComponent<Picker>();
        RegisterComponent<PickedTileModel>();
        RegisterComponent<PlaceTilemodelAbility>();
        RegisterComponent<BuildTileModelEvent>();
        RegisterComponent<StartEditTileModelEvent>();
        RegisterComponent<CancelEditTileModelEvent>();
        RegisterComponent<MoveTileModelEvent>();
        RegisterComponent<DismantleTileModelEvent>();
        RegisterComponent<RepairTileModelEvent>();
        RegisterComponent<BuildWallpaperEvent>();
        RegisterComponent<SetTileModelVariationEvent>();
        RegisterComponent<WallpaperPlacedEvent>();
        RegisterComponent<PlayerCustomMarker>();
        RegisterComponent<PlayMountedSequence>();
        RegisterComponent<PreventDisableBuff>();
        RegisterComponent<PreventDisableBuffModifications>();
        RegisterComponent<PreviewBuildingPlacement>();
        RegisterComponent<IsPreviewingPlacement>();
        RegisterComponent<DefaultUnlockedProgression>();
        RegisterComponent<DefaultUnlockedSpellSchoolAbility>();
        RegisterComponent<UnlockedShapeshiftElement>();
        RegisterComponent<UnlockedRecipeElement>();
        RegisterComponent<UnlockedBlueprintElement>();
        RegisterComponent<UnlockedMusicTrackElement>();
        RegisterComponent<UnlockedSpellBookAbility>();
        RegisterComponent<UnlockedVBlood>();
        RegisterComponent<VBloodProgressionUnlockData>();
        RegisterComponent<ProgressionBookRecipeElement>();
        RegisterComponent<ProgressionBookTechElement>();
        RegisterComponent<ProgressionBookBlueprintElement>();
        RegisterComponent<ProgressionBookShapeshiftElement>();
        RegisterComponent<ProgressionBookMusicTrackElement>();
        RegisterComponent<GiveProgressionOnConsume>();
        RegisterComponent<ProgressionGain>();
        RegisterComponent<RagdollForceSource>();
        RegisterComponent<RepairAbility>();
        RegisterComponent<Residency>();
        RegisterComponent<RespawnPointOwner>();
        RegisterComponent<RespawnPointOwnerBuffer>();
        RegisterComponent<SaddleBearer>();
        RegisterComponent<SaddleBuff>();
        RegisterComponent<SchoolDebuffData>();
        RegisterComponent<ServantMissionSetting>();
        RegisterComponent<ServantInjuredChance>();
        RegisterComponent<ServantMissionSettingsSingleton>();
        RegisterComponent<ServantSpawnHandler>();
        RegisterComponent<NewUnitTag>();
        RegisterComponent<ServerResetScheduleNoticeSettingsSingleton>();
        RegisterComponent<SetDynamicCollisionHardnessBuff>();
        RegisterComponent<SetDynamicCollisionHardnessModifications>();
        RegisterComponent<ShapeshiftImpairBuff>();
        RegisterComponent<ShowMapCollisionRadius>();
        RegisterComponent<SpawnLocationSelector>();
        RegisterComponent<SpawnPhysicsObjectOnDeath>();
        RegisterComponent<EntityMatrixElement>();
        RegisterComponent<CorrectDynamicBodyTransforms>();
        RegisterComponent<TransferWindDataFromCreator>();
        RegisterComponent<SpawnPrefabOnDestroy>();
        RegisterComponent<CopySpellModSetFromAbilitySlot>();
        RegisterComponent<JewelChanged>();
        // RegisterComponent<LegendaryItemChanged>();
        RegisterComponent<JewelSpawnSystemData>();
        RegisterComponent<JewelSpawnSystem.ManuallyGeneratedLegendaryItem>();
        RegisterComponent<SpellModAbilityGroupCharges>();
        RegisterComponent<SubSceneNetworkedPrefab>();
        RegisterComponent<SpawnMegaStaticManager>();
        RegisterComponent<SubSceneSpawnChainPrefab>();
        RegisterComponent<TargetAOESequence>();
        RegisterComponent<TeleportationRequest>();
        RegisterComponent<TeleportEvents_ToServer.TeleportToWaypointEvent>();
        RegisterComponent<TeleportEvents_ToServer.TeleportToNetherEvent>();
        RegisterComponent<TeleportEvents_ToServer.DebugTeleportToEntityEvent>();
        RegisterComponent<TeleportEvents_ToServer.DebugTeleportToNetherEvent>();
        RegisterComponent<UsePortal>();
        RegisterComponent<TheMonsterGeneratorActiveBuff>();
        RegisterComponent<Ticker>();
        RegisterComponent<TraderSpawnData>();
        RegisterComponent<TravelBuffSequence>();
        RegisterComponent<UnitSpawnHandler>();
        RegisterComponent<UpdateTranslationWithOffset>();
        RegisterComponent<UserRemovableBuff>();
        RegisterComponent<VBloodEmoteData>();
        RegisterComponent<VBloodShapeshiftData>();
        RegisterComponent<DisableUseFastQueries>();
        RegisterComponent<HybridCurrentEquipment>();
        RegisterComponent<HybridCurrentCustomization>();
        RegisterComponent<IndoorMusic>();
        RegisterComponent<AbilityInputState>();
        RegisterComponent<DisableSendAimInput>();
        RegisterComponent<ResetMovementCameraDirection>();
        RegisterComponent<JewelCraftingStation>();
        RegisterComponent<JewelCraftingProcessingRequiredItem>();
        RegisterComponent<DiscoveredMapZonesEvent>();
        RegisterComponent<RevealedMapEvent>();
        RegisterComponent<CurrentMapZone>();
        RegisterComponent<UserMapZoneElement>();
        RegisterComponent<UserMapZonePackedRevealElement>();
        RegisterComponent<MarkerGuidanceSingleton>();
        RegisterComponent<MarkerGuidanceDebugSingleton>();
        RegisterComponent<MirrorStationTag>();
        RegisterComponent<FadeToBlack>();
        RegisterComponent<FadeToBlack_Manual>();
        RegisterComponent<ServerDebugLogs>();
        RegisterComponent<ServerDebugViewData>();
        RegisterComponent<SetOwnerRotateTowardsMouse>();
        RegisterComponent<SetOwnerRotateTowardsMouseSystem.Modification>();
        RegisterComponent<SetOwnerRotateTowardsMovement>();
        RegisterComponent<SetOwnerRotateTowardsMovementSystem.Modification>();
        RegisterComponent<MiscLocalizationKeysSingleton>();
        RegisterComponent<MusicPlayerStation_Server>();
        RegisterComponent<MusicPlayer_Shared>();
        RegisterComponent<MusicPlayerStation_PlaylistElement>();
        RegisterComponent<MusicPlayerStation_UnlockedTrackElement>();
        // RegisterComponent<MusicPlayerStation_Client>();
        RegisterComponent<MusicPlayerStationTrack_Shared>();
        RegisterComponent<MusicPlayerStationTrack_Client>();
        RegisterComponent<BannedEvent.Request0>();
        RegisterComponent<BannedEvent.Reponse>();
        RegisterComponent<ForceJoinClanEvents.Request_ByClosestToPosition>();
        RegisterComponent<ForceJoinClanEvents.Request_ByPlayerName>();
        RegisterComponent<ForceJoinClanEvents.ErrorResponse>();
        RegisterComponent<ForceJoinClanEvents.AdminForceJoinedYourClan>();
        RegisterComponent<ForgeEvents.InsertItem>();
        RegisterComponent<ForgeEvents.RemoveItem>();
        RegisterComponent<ForgeEvents.StartRepair>();
        RegisterComponent<ForgeEvents.CancelRepair>();
        RegisterComponent<ForgeEvents.ClaimItem>();
        RegisterComponent<MusicPlayerStationEvents.TogglePausedEvent>();
        RegisterComponent<MusicPlayerStationEvents.AddOrRemoveTrackFromPlaylistEvent>();
        RegisterComponent<MusicPlayerStationEvents.PlayPreviousTrackEvent>();
        RegisterComponent<MusicPlayerStationEvents.PlayNextTrackEvent>();
        RegisterComponent<MusicPlayerStationEvents.StartedInteractingEvent>();
        RegisterComponent<RespecStationEvents.ResetSchoolEvent>();
        RegisterComponent<VivoxEvents.ClientEvent>();
        RegisterComponent<VivoxEvents.ClientStateEvent>();
        RegisterComponent<VivoxEvents.ServerRejectEvent>();
        RegisterComponent<VivoxEvents.ServerLoginEvent>();
        RegisterComponent<VivoxEvents.ServerChannelEvent>();
        RegisterComponent<IsSpellControlled>();
        RegisterComponent<DisableWhenNoPlayersInRangeOfChunkSystem.Singleton>();
        RegisterComponent<DisableWhenNoPlayersInRangeDebug>();
        RegisterComponent<ShowCommandBufferStats>();
        RegisterComponent<NoctemRadar>();
        RegisterComponent<PathRecorder>();
        RegisterComponent<PathRecorderEntry>();
        RegisterComponent<PerformanceSummaryElement>();
        RegisterComponent<FinalizePersistenceLoadSystem.KeepDataAfterPersistenceTestSingleton>();
        RegisterComponent<FinalizePersistenceLoadSystem.LoadedFromPersistenceTag>();
        RegisterComponent<SerializePersistenceFailedFeedbackEvent>();
        RegisterComponent<TestPersistenceV2Save>();
        RegisterComponent<SavePersistentDataEvent>();
        RegisterComponent<LinkToJointOwner>();
        RegisterComponent<ClaimedAchievementsEvent>();
        RegisterComponent<InitialUnlockedProgressionEvent>();
        RegisterComponent<QuickStartup>();
        RegisterComponent<HybridRagdoll>();
        RegisterComponent<RagdollBoneEntityElement>();
        RegisterComponent<RagdollBoneTransformElement>();
        RegisterComponent<RagdollDriven>();
        RegisterComponent<RagdollDriver>();
        RegisterComponent<RagdollifyBuffTarget>();
        RegisterComponent<RagdollCreateData>();
        RegisterComponent<RagdollStreamingTokens>();
        RegisterComponent<RagdollPhysicsColliderState>();
        RegisterComponent<HideRendererOutsideVision>();
        RegisterComponent<RelicRadar>();
        RegisterComponent<RespawnAiEvent>();
        RegisterComponent<RespecStation>();
        RegisterComponent<RotateAroundAxis>();
        RegisterComponent<Script_Buff_MoveToBusStop_DataServer>();
        RegisterComponent<ReplaceAbilityOnSlotWhenMountedBuffElement>();
        RegisterComponent<ReplaceAbilityOnSlotWhenMountedBuffModificationElement>();
        RegisterComponent<BuffSequence>();
        RegisterComponent<BuffHideOtherBuffFX>();
        RegisterComponent<ChunkWaypointSequence>();
        RegisterComponent<EntitySequence>();
        RegisterComponent<SpawnEntitySequence>();
        RegisterComponent<NetworkedSequence>();
        RegisterComponent<ScreenShake>();
        RegisterComponent<SequenceStressTest>();
        RegisterComponent<ServantCoffinstation>();
        RegisterComponent<ServantCoffinEffects>();
        RegisterComponent<ServantConvertable>();
        RegisterComponent<EquipmentSetElements>();
        RegisterComponent<EquipmentSet>();
        RegisterComponent<LifeLeechSetting>();
        RegisterComponent<PlayerLevelDamageSettings>();
        RegisterComponent<UnitLevelDamageSettings>();
        RegisterComponent<ShowAim>();
        RegisterComponent<DisableMegaStaticSingleton>();
        RegisterComponent<MegaStaticManagerDisabledTag>();
        RegisterComponent<MegaStaticSingleton>();
        RegisterComponent<RandomizedSpawnChainUpdateSystem.ConvertOnDemandProcessed>();
        RegisterComponent<SpawnChainDebugEnabled>();
        RegisterComponent<QueuedSpawnRequestSingleton>();
        RegisterComponent<StaticHierarchyBuffer>();
        RegisterComponent<StaticHierarchyData>();
        RegisterComponent<AssetSubSceneStreamingHandler_Initialized>();
        // RegisterComponent<IsEditingTileModel>();
        RegisterComponent<ShowBuildGrid>();
        RegisterComponent<ShowBuildGridSystem.ShowBuildGridActive>();
        RegisterComponent<ShowTileCollision2D>();
        RegisterComponent<ShowTileCollision2DSystem.GridIsActive>();
        RegisterComponent<ShowTileCollisionHistory>();
        RegisterComponent<ShowTileCollisionHistorySystem.ShowTileCollisionHistoryActive>();
        RegisterComponent<ShowTileHeightsDebugNew>();
        RegisterComponent<ShowTileHeightsSystemNew.GridIsActive>();
        RegisterComponent<ShowTilePlacement>();
        RegisterComponent<ShowTilePlacementSystem.GridIsActive>();
        RegisterComponent<TimeScale>();
        RegisterComponent<Trader>();
        RegisterComponent<TraderItemEntry>();
        RegisterComponent<TrophyRequests.Reset>();
        RegisterComponent<UISequenceMappingTag>();
        RegisterComponent<UISequenceMappingBuffer>();
        RegisterComponent<UnitSpawnerstation>();
        RegisterComponent<UnitSpawnPointBuffer>();
        RegisterComponent<UnlockTrophyOnBuild>();
        RegisterComponent<UserConnectionChangedEvent>();
        RegisterComponent<ProjectM.VoiceData>();
        RegisterComponent<RandomizeVoiceMap>();
        RegisterComponent<WalkBackAndForth>();
        RegisterComponent<Wallpaper_Synced_0>();
        RegisterComponent<Wallpaper_Synced_90>();
        RegisterComponent<Wallpaper_Synced_180>();
        RegisterComponent<Wallpaper_Synced_270>();
        RegisterComponent<Wallpaper_Client_0>();
        RegisterComponent<Wallpaper_Client_90>();
        RegisterComponent<Wallpaper_Client_180>();
        RegisterComponent<Wallpaper_Client_270>();
        RegisterComponent<WallpaperStyles>();
        RegisterComponent<WallpaperParentTransform>();
        RegisterComponent<WallpaperDamaged>();
        RegisterComponent<WallpaperSet>();
        RegisterComponent<QueuedWorkstationCraftAction>();
        RegisterComponent<QueuedWorkstationCraftActionItems>();
        RegisterComponent<WorldVFXSpawnManagerIndex>();
        RegisterComponent<TreeParamsBakingData>();
        RegisterComponent<ShaderProperty_TreeParams0>();
        RegisterComponent<ShaderProperty_TreeParams1>();
        RegisterComponent<RestrictPlacementArea>();
        RegisterComponent<SnappingPoint>();
        // RegisterComponent<SnappingPointClosestTo>();
        RegisterComponent<SnappingPointCollider>();
        RegisterComponent<IsChildTileModelBakingData>();
        RegisterComponent<NetworkedPrefabChildren>();
        RegisterComponent<NetworkChildToDestroy>();
        RegisterComponent<TileModelSpatialLookupSystem.Singleton>();
        RegisterComponent<BuffSequenceSpawned>();
        RegisterComponent<BuffSequence_WaitingForCondition>();
        RegisterComponent<Pull_Position>();
        RegisterComponent<Pull_Rotation>();
        RegisterComponent<Pull_Input>();
        RegisterComponent<Pull_Team>();
        RegisterComponent<Pull_Entity>();
        RegisterComponent<Pull_BuffTarget>();
        RegisterComponent<BulletHellParticleSystem>();
        RegisterComponent<BulletHellParticleIndex>();
        RegisterComponent<GlobalParticleIndex>();
        RegisterComponent<GlobalParticleEmissionData>();
        RegisterComponent<GlobalParticleSystem>();
        RegisterComponent<ParticleScale>();
        RegisterComponent<SequencerParticle>();
        RegisterComponent<VisualEffectParameterElement>();
        RegisterComponent<LineRendererPositionElement>();
        RegisterComponent<SequenceBakingSystem.BakeSequence>();
        RegisterComponent<RunSetupGraphTag>();
        RegisterComponent<DebugSequencesSingleton>();
        RegisterComponent<SequencerStateMetadata>();
        RegisterComponent<SequencerParameterMetadata>();
        RegisterComponent<SequencerStateHistory>();
        RegisterComponent<SequencerBlackboardHistory>();
        RegisterComponent<SequencerDebugHistoryInfo>();
        RegisterComponent<ClientReplayRecorderEnabled>();
        RegisterComponent<ClientReplayPlayerEnabled>();
        RegisterComponent<ReplayJumpToSnapshotEvent>();
        RegisterComponent<ReplayStoreSnapshotEvent>();
        RegisterComponent<ReplayStoreSnapshotEventBuffer>();
        RegisterComponent<ReplayScreenshotBuffer>();
        RegisterComponent<ReplayCreateSnapshotEvent>();
        RegisterComponent<PhysicsRubble>();
        RegisterComponent<PickingSettings>();
        RegisterComponent<PickParentTag>();
        RegisterComponent<ShowPicking>();
        RegisterComponent<ProxyLightCullingBounds>();
        RegisterComponent<ProxyDyeData>();
        RegisterComponent<DistanceCulling>();
        RegisterComponent<AimDirectionPreviewComponent>();
        RegisterComponent<AimWorldTargetComponent>();
        RegisterComponent<CanFadeOut>();
        RegisterComponent<FadeOutBuffer>();
        RegisterComponent<AnimateDitherAlpha>();
        RegisterComponent<MeshRendererFadingSetup>();
        RegisterComponent<HybridModelFadingSetup>();
        RegisterComponent<FadeOutInFrontOfUnit>();
        RegisterComponent<FadeOutObstacles>();
        RegisterComponent<FadeTargetsSingleton>();
        RegisterComponent<CurrentFadingDataSingleton>();
        RegisterComponent<MoodColliderSphere>();
        RegisterComponent<MoodColliderBox>();
        RegisterComponent<OccluderTriangle>();
        RegisterComponent<OccluderIndex>();
        RegisterComponent<OccluderVertex>();
        RegisterComponent<ShowWorldTargetPreviewTag>();
        RegisterComponent<WallpaperFadeOutBuffer>();
        RegisterComponent<FadingEntitiesBaking>();
        RegisterComponent<MeshRendererFadingBaking>();
        RegisterComponent<ShaderProperty_AlphaMultiply>();
        RegisterComponent<ShaderProperty_BlinkColor>();
        RegisterComponent<ShaderProperty_DitherAlpha>();
        RegisterComponent<ShaderProperty_CanFadeOut>();
        RegisterComponent<ShaderProperty_DissolveColor>();
        RegisterComponent<ShaderProperty_DissolveHeightMultiplier>();
        RegisterComponent<ShaderProperty_RustleForceVector>();
        RegisterComponent<ShaderProperty_RustleAnimationTime>();
        RegisterComponent<ShaderProperty_OverlappingAnimationTime>();
        RegisterComponent<ShaderProperty_DrawLine>();
        RegisterComponent<ShaderProperty_IsAlly>();
        RegisterComponent<ShaderProperty_BaseColor>();
        RegisterComponent<ShaderProperty_BaseColorTrim1>();
        RegisterComponent<ShaderProperty_BaseColorTrim2>();
        RegisterComponent<ShaderProperty_BaseColorTrim3>();
        RegisterComponent<AddSequencerPropsBaking>();
        RegisterComponent<AddDissolveBaking>();
        RegisterComponent<AddBlinkBaking>();
        RegisterComponent<SubSceneStreamingTextureIndices>();
        RegisterComponent<PrefabStreamingTextureIndices>();
        RegisterComponent<SunBlockerRegion>();
        RegisterComponent<LightningAttractorGameplay>();
        RegisterComponent<LightningAttractorAmbience>();
        RegisterComponent<LightningConsumer>();
        RegisterComponent<LightningLight>();
        RegisterComponent<LightningStormRegion>();
        RegisterComponent<LightningStormType>();
        RegisterComponent<DisconnectSunImmunityTimeTag>();
        RegisterComponent<Script_InspectTarget_Data>();
        RegisterComponent<Script_Interact_Inspect_Data>();
        RegisterComponent<DestroyOnMountedCollision>();
        RegisterComponent<RadialZone_Environment_Data>();
        RegisterComponent<RadialZone_Sequence>();
        RegisterComponent<RadialZone_Environment_HitSpheres>();
        RegisterComponent<HolyArea>();
        RegisterComponent<GarlicArea>();
        RegisterComponent<CurseArea>();
        RegisterComponent<WarEventRegistrySystem.Registered>();
        RegisterComponent<BranchThroughGameplayEvent>();
        RegisterComponent<ConsumeBuffThroughGameplayEvent>();
        RegisterComponent<DelayThroughGameplayEvent>();
        RegisterComponent<DelayThroughGameplayEvent_Trigger>();
        RegisterComponent<IterateThroughGameplayEvent>();
        RegisterComponent<ShowPaintedTerrainTileGrid>();
        RegisterComponent<ShowSurfaceFluffDebug>();
        RegisterComponent<ShowSurfaceFluffSystem.GridIsActive>();
        RegisterComponent<ShowTileHeightsDebug>();
        RegisterComponent<ShowTileHeightsSystem.GridIsActive>();
        RegisterComponent<PlayerPresence>();
        RegisterComponent<CastleBuildingAttachToParentsBuffer>();
        RegisterComponent<CastleBuildingAttachedChildrenBuffer>();
        RegisterComponent<CastleBuildingAttachmentActiveBuffsBuffer>();
        RegisterComponent<CastleBuildingAttachmentApplyBuff>();
        RegisterComponent<CastleBuildingAttachmentAddedEvent>();
        RegisterComponent<CastleBuildingAttachmentRemovedEvent>();
        RegisterComponent<BuildMode>();
        RegisterComponent<PlannedTileModel>();
        RegisterComponent<ExitBuildModeEvent>();
        RegisterComponent<CreateTileModelSelection>();
        RegisterComponent<EditTileModelSelection>();
        RegisterComponent<HoverTileModelSelection>();
        RegisterComponent<PlannedWallpaper>();
        RegisterComponent<EditWallpaperSelection>();
        RegisterComponent<BuildModePlacementOperation>();
        RegisterComponent<BuildModeState>();
        RegisterComponent<BuildModeSettings>();
        RegisterComponent<CanBuildTileModels>();
        RegisterComponent<CurrentTileModelEditing>();
        RegisterComponent<CastleBlockCollection>();
        RegisterComponent<CastleBuildingHideInPreview>();
        RegisterComponent<CastleBuildingHideInPreviewComponent.HideInPreviewBufferBaking>();
        RegisterComponent<CastleBuildingPreviewFadeTarget>();
        RegisterComponent<CastleBuildingShowOnlyInPreview>();
        RegisterComponent<CastleBuildingShowOnlyInPreviewComponent.AddComponent>();
        RegisterComponent<GenerateCastlePrefabs>();
        RegisterComponent<CastleHeartActiveSequenceTierBlobData>();
        RegisterComponent<CastleHeartModelSwapData>();
        RegisterComponent<CastleHeartModelTier>();
        RegisterComponent<LoadCastleOperation>();
        RegisterComponent<LoadCastleObjectElements>();
        RegisterComponent<LoadCastleObjectWallpaperElements>();
        RegisterComponent<StartLoadingCastleEvent>();
        RegisterComponent<FinishLoadingCastleEvent>();
        RegisterComponent<CastleBuildingFusedChild>();
        RegisterComponent<CastleBuildingFusedRoot>();
        RegisterComponent<CastleBuildingFusedChildrenBuffer>();
        RegisterComponent<LimitedSnapRotationTag>();
        RegisterComponent<OnlyShowInBuildModeTag>();
        RegisterComponent<ApplyPlacementHistorySystem.Data>();
        RegisterComponent<CastleRailing>();
        RegisterComponent<CastleRailingPrefabsCollection>();
        RegisterComponent<CastleRebuildPhaseState>();
        RegisterComponent<CastleRebuildPhaseSequence>();
        RegisterComponent<CastleRebuildSettings>();
        RegisterComponent<CastleRoom>();
        // RegisterComponent<CastleRoof>();
        RegisterComponent<CastleRoofOrnaments>();
        RegisterComponent<CastleRoomFloorsBuffer>();
        RegisterComponent<CastleRoomWallsBuffer>();
        RegisterComponent<CastleRoomWorkstationsBuffer>();
        RegisterComponent<CastleFloorPreviousData>();
        RegisterComponent<RemovedCastleFloor>();
        RegisterComponent<CastleWallPreviousData>();
        RegisterComponent<CastleStairs>();
        RegisterComponent<CastleWall>();
        RegisterComponent<CastleRoomWall>();
        RegisterComponent<WallRoofOrnament>();
        RegisterComponent<TileModelEventsBarrier.Singleton>();
        RegisterComponent<DyeableCastleObject>();
        // RegisterComponent<DyeColorSetupFlagBuffer>();
        // RegisterComponent<DyeColorSetupFlagOffsetBuffer>();
        // RegisterComponent<SetupFlagBuffer>();
        // RegisterComponent<MeshDyeBuffer>();
        RegisterComponent<ProxyEntityBuffer>();
        // RegisterComponent<HybridDyeableTag>();
        RegisterComponent<CastleRebuildRegistry>();
        RegisterComponent<CastleRebuildRegistry_Server>();
        RegisterComponent<CastleRebuildTransferInitializeEvent>();
        RegisterComponent<CastleRebuildTransferSourceCommon>();
        RegisterComponent<CastleRebuildTransferTargetCommon>();
        RegisterComponent<CastleRebuildTransferUniquePair>();
        RegisterComponent<CastleRebuildTransferData>();
        RegisterComponent<CastleRebuildTransferSteps>();
        RegisterComponent<PlacementOperationRequest>();
        RegisterComponent<RestrictPlacementToMapZones>();
        RegisterComponent<ItemBuilding>();
        RegisterComponent<AssetSwapMeshRenderersToProcessInBaking>();
        RegisterComponent<WallpaperUpdatedEvent>();
        RegisterComponent<AssetSwapArtBuffer>();
        RegisterComponent<AssetSwapColliderBuffer>();
        RegisterComponent<AssetSwapState>();
        RegisterComponent<StudioEvent>();
        RegisterComponent<StudioEventUpdatePosition>();
        RegisterComponent<StudioVoiceData>();
        RegisterComponent<CurrentVoiceLine>();
        RegisterComponent<StudioEventDestroyOnCompletion>();
        RegisterComponent<StudioEventParameterBuffer>();
        RegisterComponent<StudioEventInstance>();
        RegisterComponent<StudioEventInstance_Finished>();
        RegisterComponent<StudioListener>();
        RegisterComponent<FakeTurnOffStudioListener>();
        RegisterComponent<FootstepSurfaceOverride>();
        RegisterComponent<BlinkEntityEvent>();
        RegisterComponent<DestroyedEntity>();
        RegisterComponent<ClanEvents_Client.CreateClan_Request>();
        RegisterComponent<ClanEvents_Client.EditClan>();
        RegisterComponent<ClanEvents_Client.InvitePlayerToClan>();
        RegisterComponent<ClanEvents_Client.LeaveClan>();
        RegisterComponent<ClanEvents_Client.ClanInviteResponse>();
        RegisterComponent<ClanEvents_Client.ChangeRole_Request>();
        RegisterComponent<ClanEvents_Client.Kick_Request>();
        RegisterComponent<ClanEvents_Server.CreateClan_Response>();
        RegisterComponent<ClanEvents_Server.ClanInvitationResponse>();
        RegisterComponent<ClanEvents_Server.ClanInvitationResult>();
        RegisterComponent<ClanEvents_Server.ClanInvitationResultToInviter>();
        RegisterComponent<ClanEvents_Server.LeaveClanResultResponse>();
        RegisterComponent<ClanEvents_Server.AcceptClanInviteResultResponse>();
        RegisterComponent<ClanEvents_Server.RoleChangedEvent>();
        RegisterComponent<ClanEvents_Server.MemberConnectionChangedEvent>();
        RegisterComponent<ClanEvents_Server.KickedEvent>();
        RegisterComponent<TeleportDebugEvent>();
        RegisterComponent<PlayerTeleportDebugEvent>();
        RegisterComponent<TeleportPlayerToLocationDebugEvent>();
        RegisterComponent<TeleportToPlayerLocationDebugEvent>();
        RegisterComponent<SetPlayerTeamDebugEvent>();
        RegisterComponent<LatencyDebugEvent>();
        RegisterComponent<CrashDebugEvent>();
        RegisterComponent<SpawnDebugEvent>();
        RegisterComponent<SpawnCharmeableDebugEvent>();
        RegisterComponent<SpawnChainAllStagesDebugEvent>();
        RegisterComponent<SpawnChainStageDebugEvent>();
        RegisterComponent<DestroyDebugEvent>();
        RegisterComponent<GiveDebugEvent>();
        RegisterComponent<CreateJewelDebugEvent>();
        RegisterComponent<CreateJewelDebugEventV2>();
        RegisterComponent<GenerateJewelDebugEvent>();
        RegisterComponent<GenerateLegendaryWeaponDebugEvent>();
        RegisterComponent<CreateLegendaryWeaponDebugEvent>();
        RegisterComponent<GenerateJewelAtUnitLevelDebugEvent>();
        RegisterComponent<CustomizationDebugEvent>();
        RegisterComponent<RandomizeCustomizationDebugEvent>();
        RegisterComponent<RandomizeCustomization2DebugEvent>();
        RegisterComponent<ChangeHealthDebugEvent>();
        RegisterComponent<ChangeBloodDebugEvent>();
        // RegisterComponent<ConsumeBloodDebugEvent>();
        RegisterComponent<ChangeVBloodDebugEvent>();
        RegisterComponent<TeleportToVBloodDebugEvent>();
        RegisterComponent<UnlockAllVBloodAbilities>();
        RegisterComponent<UnlockAllVBloodShapeshifts>();
        RegisterComponent<SetDebugSettingEvent>();
        RegisterComponent<ResetCooldownsDebugEvent>();
        RegisterComponent<CompleteJournalDebugEvent>();
        RegisterComponent<ResetServerLogsEvent>();
        RegisterComponent<JumpToNextBloodMoonEvent>();
        RegisterComponent<UnlockRegionDebugEvent>();
        // RegisterComponent<SetTimeScaleDebugEvent>();
        RegisterComponent<RespawnAiDebugEvent>();
        RegisterComponent<DestroyDeadDebugEvent>();
        RegisterComponent<ControlDebugEvent>();
        RegisterComponent<SetControlMoveSpeedDebugEvent>();
        // RegisterComponent<SetCloudinessDebugEvent>();
        RegisterComponent<OverrideVampireAttackPowerDebugEvent>();
        RegisterComponent<RenameUserDebugEvent>();
        RegisterComponent<CompleteAllAchievementsEvent>();
        RegisterComponent<TrackVBloodDebugEvent>();
        RegisterComponent<CastAbilityServerDebugEvent>();
        RegisterComponent<SetUserContentDebugEvent>();
        RegisterComponent<SetMovementSpeedDebugEvent>();
        RegisterComponent<ApplyBuffDebugEvent>();
        RegisterComponent<UnlockProgressionDebugEvent>();
        RegisterComponent<TeleportToUnitEvent>();
        RegisterComponent<PrintAggroDebugEvent>();
        RegisterComponent<FromCharacter>();
        RegisterComponent<HandleClientDebugEvent>();
        RegisterComponent<ReceiveNetworkEventTag>();
        RegisterComponent<SendNetworkEventTag>();
        RegisterComponent<NetworkEventType>();
        RegisterComponent<UseItemEvent>();
        RegisterComponent<StopInteractingWithObjectEvent>();
        RegisterComponent<EquipItemEvent>();
        RegisterComponent<EquipServantItemEvent>();
        RegisterComponent<EquipmentToEquipmentTransferEvent>();
        RegisterComponent<EquipItemFromInventoryEvent>();
        RegisterComponent<EquipServantItemFromInventoryEvent>();
        RegisterComponent<UnequipItemEvent>();
        RegisterComponent<UnequipServantItemEvent>();
        RegisterComponent<EquipSaddleEvent>();
        RegisterComponent<UnequipSaddleEvent>();
        RegisterComponent<DropItemAtSlotEvent>();
        RegisterComponent<DropEquippedItemEvent>();
        RegisterComponent<DropInventoryItemEvent>();
        RegisterComponent<DropEntireInventoryEvent>();
        RegisterComponent<MoveItemBetweenInventoriesEvent>();
        RegisterComponent<MoveAllItemsBetweenInventoriesEvent>();
        RegisterComponent<MoveAllItemsBetweenInventoriesEventV2>();
        RegisterComponent<SmartMergeItemsBetweenInventoriesEvent>();
        RegisterComponent<SortSingleInventoryEvent>();
        RegisterComponent<SortAllInventoriesEvent>();
        RegisterComponent<SplitItemEvent>();
        RegisterComponent<RepairItemEvent>();
        RegisterComponent<RepairEquippedItemEvent>();
        RegisterComponent<StartCraftItemEvent>();
        RegisterComponent<StartChargeItemEvent>();
        RegisterComponent<CollectChargedItemsEvent>();
        RegisterComponent<GetTerritoryOwnerRequestEvent>();
        // RegisterComponent<GetTileModelOwnerRequestEvent>();
        RegisterComponent<GetUserInfoRequestEvent>();
        RegisterComponent<StartCraftJewelEvent>();
        RegisterComponent<StopCraftJewelEvent>();
        RegisterComponent<CompleteCraftJewelEvent>();
        RegisterComponent<DiscoverResearchEvent>();
        RegisterComponent<UnlockResearchEvent>();
        RegisterComponent<ShareRefinementEvent>();
        RegisterComponent<ShareUnitspawnerRecipesEvent>();
        RegisterComponent<StartTrackVBloodUnitEventV2>();
        RegisterComponent<StopTrackVBloodUnitEvent>();
        RegisterComponent<CustomizeCharacterEvent>();
        RegisterComponent<StartCharacterCraftItemEvent>();
        RegisterComponent<StopCraftItemEvent>();
        RegisterComponent<StopCharacterCraftItemEvent>();
        RegisterComponent<ToggleRefiningEvent>();
        RegisterComponent<ToggleRefiningRecipeEvent>();
        RegisterComponent<InteractWithPrisonerEvent>();
        RegisterComponent<ToggleSalvageEvent>();
        RegisterComponent<SendOnMissionEvent>();
        RegisterComponent<AbortMissionEvent>();
        RegisterComponent<ServantInfoEvent.Request>();
        RegisterComponent<ServantInfoEvent.Response>();
        RegisterComponent<ClaimAchievementEvent>();
        RegisterComponent<ForceClaimAchievement_Debug>();
        RegisterComponent<CompleteTutorialEvent>();
        RegisterComponent<ClearTutorialEvent>();
        RegisterComponent<ProjectM.Network.EnterShapeshiftEvent>();
        RegisterComponent<UseDefaultActionEvent>();
        RegisterComponent<UseEmoteEvent>();
        RegisterComponent<ActivateVBloodAbilityEvent>();
        RegisterComponent<ChatMessageEvent>();
        RegisterComponent<ChangeTransmogColorEvent>();
        RegisterComponent<SetInvisibleTransmogModelEvent>();
        RegisterComponent<ChangeTransmogModeEvent>();
        RegisterComponent<ServantCoffinActionEvent>();
        RegisterComponent<ChangeServantNameEvent>();
        RegisterComponent<CastleHeartInteractEvent>();
        RegisterComponent<CastleHeartAdminEvent>();
        RegisterComponent<GetCastleIndexRequestEvent>();
        RegisterComponent<GenerateCastleEvent>();
        RegisterComponent<GenerateCastlesInRegionEvent>();
        RegisterComponent<CastleRebuildConnectEvent>();
        RegisterComponent<CastleRebuildDisconnectEvent>();
        RegisterComponent<CastleRebuildTransferEvent>();
        RegisterComponent<KillEvent>();
        RegisterComponent<RemovePvPProtectionEvent>();
        RegisterComponent<ToggleUserPermissionsEvent>();
        RegisterComponent<GiveUpReviveEvent>();
        RegisterComponent<CharacterRespawnEvent>();
        RegisterComponent<AdminAuthEvent>();
        RegisterComponent<DeauthAdminEvent>();
        RegisterComponent<SetUserAdminLevelAdminEvent>();
        RegisterComponent<BecomeObserverEvent>();
        RegisterComponent<ToggleInvulnerableEvent>();
        RegisterComponent<SetAdminOnlyDebugEventsAdminEvent>();
        RegisterComponent<CompleteCurrentAchievementAdminEvent>();
        RegisterComponent<RunConsoleCommandDebugEvent>();
        RegisterComponent<SetMapMarkerEvent>();
        RegisterComponent<DeleteMapMarkerEvent>();
        RegisterComponent<RegisterCharacterNameEvent>();
        RegisterComponent<CreateCharacterCacheData>();
        RegisterComponent<CreateCharacterEvent>();
        RegisterComponent<KickEvent>();
        RegisterComponent<BanEvent>();
        RegisterComponent<TraderPurchaseEvent>();
        RegisterComponent<GetVBloodPositionsEvent>();
        RegisterComponent<DecayEvent>();
        RegisterComponent<SetTimeOfDayEvent>();
        RegisterComponent<ChangeDurabilityDebugEvent>();
        RegisterComponent<ChangeHealthOfClosestToPositionDebugEvent>();
        RegisterComponent<SpawnUnitEvent>();
        RegisterComponent<RecommendedSpawnLocationRequestEvent>();
        RegisterComponent<OpenVBloodMenuEvent>();
        RegisterComponent<EquipJewelEvent>();
        RegisterComponent<UnequipJewelEvent>();
        RegisterComponent<ForceCraftingStationsEvent>();
        RegisterComponent<ResetSpellSchoolProgression>();
        RegisterComponent<UnlockSpellSchoolProgression>();
        RegisterComponent<UnlockSpellSchoolPassive>();
        RegisterComponent<LearnSpellSchoolPassive>();
        RegisterComponent<ShareSpellSchoolPassive>();
        RegisterComponent<DebugUnlockSpellSchoolPassive>();
        RegisterComponent<DebugUnlockSpellSchoolPassiveInStation>();
        RegisterComponent<ShareAllSpellSchoolPassives>();
        RegisterComponent<LearnAllSpellSchoolPassives>();
        // RegisterComponent<DebugUnlockAllSpellSchoolPassives>();
        RegisterComponent<UnlockVBlood>();
        RegisterComponent<WarEvent_StartEvent>();
        RegisterComponent<WarEvent_ScheduleEvent>();
        RegisterComponent<WarEvent_SetRemainingTime>();
        RegisterComponent<WarEvent_CloseGateEvent>();
        RegisterComponent<WarEvent_ClosePortalEvent>();
        RegisterComponent<WarEvent_SimulateEventActiveUsers>();
        RegisterComponent<WarEvent_SimulateGateActiveUsers>();
        RegisterComponent<ServantDepositInventoryEvent>();
        RegisterComponent<StopEndGameCreditsEvent>();
        RegisterComponent<GetUserStatsEvent>();
        RegisterComponent<GetServerTimeInfoRequestEvent>();
        RegisterComponent<GetServerTimeInfoResponseEvent>();
        RegisterComponent<GetUserStatsResponse>();
        RegisterComponent<BuildModeEnteredEvent>();
        RegisterComponent<CharacterMenuOpenedEvent>();
        RegisterComponent<MapEnteredEvent>();
        RegisterComponent<ChatQuip_ToServer>();
        RegisterComponent<ChatQuip_ToClient>();
        RegisterComponent<GetRebuildContainerInventoryEvent>();
        RegisterComponent<GetRebuildContainerInventoryResultEvent>();
        RegisterComponent<RemoveUserRemovableBuffEvent>();
        RegisterComponent<UpdateUserContentEvent>();
        RegisterComponent<ServerDebugErrorEvent>();
        RegisterComponent<InteractEvents_Client.RenameInteractable>();
        RegisterComponent<SendEventToUser>();
        RegisterComponent<SendEventToUsers>();
        RegisterComponent<CharacterHasRespawnedEvent>();
        RegisterComponent<ChatMessageServerEvent>();
        RegisterComponent<UnlockProgressionServerEvent>();
        RegisterComponent<LockProgressionServerEvent>();
        RegisterComponent<AchievementClaimedServerEvent>();
        RegisterComponent<MapZoneDiscoveredEvent>();
        RegisterComponent<CreateCharacterResponseEvent>();
        RegisterComponent<ClientActionResponseEvent>();
        RegisterComponent<GetTerritoryOwnerResponseEvent>();
        // RegisterComponent<GetTileModelOwnerResponseEvent>();
        RegisterComponent<ServerIsRestartingServerEvent>();
        RegisterComponent<WarningForBeingAFKEvent>();
        RegisterComponent<HardCoreDeathEvent>();
        RegisterComponent<ResetBuffAgeServerEvent>();
        RegisterComponent<UserKillServerEvent>();
        RegisterComponent<UserDownedServerEvent>();
        RegisterComponent<CastleWallBreachedEvent>();
        RegisterComponent<NewSiegeWeapon>();
        RegisterComponent<CastleAttackedEvent>();
        RegisterComponent<ServantMissionFinishedEvent>();
        RegisterComponent<ServantMissionStartedEvent>();
        RegisterComponent<PvPToggleEvent>();
        RegisterComponent<AdminCommandNotifyUsersServerEvent>();
        RegisterComponent<ResetScheduleNotificationEvent>();
        RegisterComponent<UserInfoServerEvent>();
        RegisterComponent<UserConnectedServerEvent>();
        RegisterComponent<UserDisconnectedServerEvent>();
        RegisterComponent<UserInfoSyncEvent>();
        RegisterComponent<CastleIndexBufferSingleton>();
        RegisterComponent<CastleIndexElement>();
        RegisterComponent<GetCastleIndexResponseEvent>();
        RegisterComponent<RecommendedSpawnLocationResponseEvent>();
        RegisterComponent<GetVBloodPositionsResponseEvent>();
        RegisterComponent<JewelEquippedResponseEvent>();
        RegisterComponent<CastleRebuildCreateEvent>();
        RegisterComponent<CastleRebuildDestroyEvent>();
        RegisterComponent<CastleRebuildStateEvent>();
        RegisterComponent<CastleRebuildCommonDataEvent>();
        RegisterComponent<CastleRebuildUpdateUniqueDataEvent>();
        RegisterComponent<CastleRebuildRemoveUniqueDataEvent>();
        RegisterComponent<CastleRebuildInvalidateSourceTransformsEvent>();
        RegisterComponent<UnlockTrophyEvent>();
        RegisterComponent<NetworkInterpolated_Shared>();
        RegisterComponent<NetworkInterpolated_Client>();
        RegisterComponent<NetworkInterpolated_Client_SnapshotElement>();
        RegisterComponent<DisableNetworkInterpolation>();
        RegisterComponent<ShowNetworkInterpolation>();
        RegisterComponent<StatusChangedEvent>();
        RegisterComponent<HailMessage>();
        RegisterComponent<HailMessageBuffer>();
        RegisterComponent<ReceivedPacketBuffer>();
        RegisterComponent<ReceivedPacket>();
        RegisterComponent<PacketBookkeeperSystemData>();
        RegisterComponent<LogPrioritization>();
        RegisterComponent<SpellModSyncSystem_ServerData>();
        RegisterComponent<SpellModSetAckEvent>();
        RegisterComponent<SpiderLeg>();
        RegisterComponent<SpiderLegsDriver>();
        RegisterComponent<HybridDefaultEquipment>();
        RegisterComponent<HybridClothUser>();
        RegisterComponent<AnimatorNewState>();
        RegisterComponent<AnimatorLastState>();
        RegisterComponent<AnimatorPlayAnimationBuffer>();
        RegisterComponent<AnimationLayerBuffer>();
        RegisterComponent<HybridModelLocomotionData>();
        RegisterComponent<HybridModelStrafeLocomotionData>();
        RegisterComponent<HybridModelParticleScale>();
        RegisterComponent<HybridModel>();
        RegisterComponent<HybridModelAnimData>();
        RegisterComponent<HybridModelStreamingTokens>();
        RegisterComponent<HybridModelUser>();
        RegisterComponent<WaitExitHybridModelOverrideStreamingTag>();
        RegisterComponent<HybridModelState>();
        RegisterComponent<UpdateHybridModel>();
        RegisterComponent<BoneChainSegment_Data>();
        RegisterComponent<BoneChainStick_Data>();
        RegisterComponent<BoneChain_Data>();
        RegisterComponent<StunCloth_Collider_Data>();
        RegisterComponent<AimPreviewCommonData>();
        RegisterComponent<AimPreviewBezierComponent>();
        RegisterComponent<AimPreviewBezierMeshDataComponent>();
        RegisterComponent<AimPreviewCircleComponent>();
        RegisterComponent<AimPreviewCircleMeshDataComponent>();
        RegisterComponent<AimPreviewConeComponent>();
        RegisterComponent<AimPreviewConeMeshDataComponent>();
        RegisterComponent<AimPreviewQuadComponent>();
        RegisterComponent<AchievementCollectionBuffer>();
        RegisterComponent<AchievementCollectionSingleton>();
        RegisterComponent<BuildMenuComposition>();
        RegisterComponent<BuildMenuGroup>();
        RegisterComponent<CharacterHeightHUD>();
        RegisterComponent<ScrollingCombatText>();
        RegisterComponent<Snapshot_AbilityChargeCooldowns>();
        RegisterComponent<Snapshot_AbilityStateBuffer>();
        RegisterComponent<Snapshot_AchievementInProgressElement>();
        RegisterComponent<Snapshot_ActiveServantMission>();
        RegisterComponent<Snapshot_AllyPermission>();
        RegisterComponent<Snapshot_BloodHuntBuffer>();
        RegisterComponent<Snapshot_CastleBuildingAttachedChildrenBuffer>();
        RegisterComponent<Snapshot_CastleBuildingAttachToParentsBuffer>();
        RegisterComponent<Snapshot_CastleBuildingFusedChildrenBuffer>();
        RegisterComponent<Snapshot_CastleMemberNames>();
        RegisterComponent<Snapshot_CastleTeleporterElement>();
        RegisterComponent<Snapshot_CastleTerritoryDecay>();
        RegisterComponent<Snapshot_CastleTerritoryOccupant>();
        RegisterComponent<Snapshot_ClanMemberStatus>();
        RegisterComponent<Snapshot_FollowerBuffer>();
        RegisterComponent<Snapshot_InventoryBuffer>();
        RegisterComponent<Snapshot_InventoryInstanceElement>();
        RegisterComponent<Snapshot_LearnablePassivesBuffer>();
        RegisterComponent<Snapshot_MegaStaticDestroyedBuffer>();
        RegisterComponent<Snapshot_MegaStaticPrefabBuffer>();
        RegisterComponent<Snapshot_MusicPlayerStation_PlaylistElement>();
        RegisterComponent<Snapshot_MusicPlayerStation_UnlockedTrackElement>();
        RegisterComponent<Snapshot_PerksBuffer>();
        RegisterComponent<Snapshot_ProgressionBookBlueprintElement>();
        RegisterComponent<Snapshot_ProgressionBookRecipeElement>();
        RegisterComponent<Snapshot_ProgressionBookShapeshiftElement>();
        RegisterComponent<Snapshot_ProgressionBookTechElement>();
        RegisterComponent<Snapshot_QueuedWorkstationCraftAction>();
        RegisterComponent<Snapshot_RefinementstationRecipesBuffer>();
        RegisterComponent<Snapshot_ResearchBuffer>();
        RegisterComponent<Snapshot_RespawnPointOwnerBuffer>();
        RegisterComponent<Snapshot_Script_Dracula_WarpRiftTargetData>();
        RegisterComponent<Snapshot_Script_LightningProjectile_Nodes>();
        RegisterComponent<Snapshot_ShardBossHuntBuffer>();
        RegisterComponent<Snapshot_SpawnedUnitsBuffer>();
        RegisterComponent<Snapshot_TradeCost>();
        RegisterComponent<Snapshot_TradeOutput>();
        RegisterComponent<Snapshot_TraderEntry>();
        RegisterComponent<Snapshot_UnlockedSpellBookAbility>();
        RegisterComponent<Snapshot_UnlockedWaypointElement>();
        RegisterComponent<Snapshot_UserMapZoneElement>();
        RegisterComponent<NetworkProfilerSystem.Singleton>();
        RegisterComponent<NewDestroyedEntity>();
        RegisterComponent<CinematicView.InitData>();
        RegisterComponent<ShowInSpellbookBar>();
        RegisterComponent<ShowOnBuffBar>();
        RegisterComponent<DefaultEquipmentCollectionSingleton>();
        RegisterComponent<HideOnMenuBuffer>();
        RegisterComponent<ScreenEdgeIcon>();
        RegisterComponent<TutorialMarker>();
        RegisterComponent<CloseAllMenu>();
        RegisterComponent<ConditionalInfo>();
        RegisterComponent<ConditionalInfoElement>();
        RegisterComponent<TerritoryBuildTriggerComponent>();
        RegisterComponent<CharacterHUDEntry.Data>();
        RegisterComponent<HealthBarHUD>();
        RegisterComponent<CharacterHudProgressBar>();
        RegisterComponent<BuildInventoryItemMenu.InitData>();
        RegisterComponent<BuildMenuWallpaperOperation>();
        RegisterComponent<BuildMenuWallpaperOperationSequenceData>();
        RegisterComponent<BuildMenuWallpaperOperationActiveSequenceElement>();
        RegisterComponent<WallpaperWallSelection>();
        RegisterComponent<WallpaperPillarSelection>();
        RegisterComponent<CastleHeartMenu.InitData>();
        RegisterComponent<CastleHeartRebuildMenu.InitData>();
        RegisterComponent<CastleHeartRebuildSubMenu.State>();
        RegisterComponent<CastleHeartSubMenuMapper.CastleHeartTarget>();
        RegisterComponent<CharacterCreationMenu.InitData>();
        RegisterComponent<CharacterMenu.InitData>();
        RegisterComponent<ContainerMenu.InitData>();
        RegisterComponent<ContainerSubMenuMapper.ContainerTarget>();
        RegisterComponent<ForgeSubMenuMapper.ForgeTarget>();
        RegisterComponent<LightningRodSubMenuMapper.WorkstationTarget>();
        RegisterComponent<ForgeMenu.InitData>();
        RegisterComponent<InventoryMenu.InitData>();
        RegisterComponent<InventorySubMenuMapper.InventoryTarget>();
        RegisterComponent<JewelCraftingMenu.InitData>();
        RegisterComponent<JewelCraftingSubMenuMapper.WorkstationTarget>();
        RegisterComponent<LightningRodMenu.InitData>();
        RegisterComponent<MountSubMenuMapper.MountMenuTarget>();
        RegisterComponent<MusicPlayerStationMenu.InitData>();
        RegisterComponent<PrisonMenu.InitData>();
        RegisterComponent<PrisonSubMenuMapper.PrisonTarget>();
        RegisterComponent<RefinementstationMenu.InitData>();
        RegisterComponent<RefinementstationSubMenuMapper.RefinementstationTarget>();
        RegisterComponent<ResearchstationMenu.InitData>();
        RegisterComponent<ResearchstationSubMenuMapper.ResearchstationTarget>();
        RegisterComponent<RespecStationMenu.InitData>();
        RegisterComponent<SalvagestationMenu.InitData>();
        RegisterComponent<SalvagestationSubMenuMapper.SalvagestationTarget>();
        RegisterComponent<ServantCoffinstationMenu.InitData>();
        RegisterComponent<ServantCoffinstationSubMenuMapper.ServantCoffinstationTarget>();
        RegisterComponent<ServantInventorySubMenuMapper.ServantMenuTarget>();
        RegisterComponent<SpellSchoolPassiveStationMenu.InitData>();
        RegisterComponent<SpellSchoolPassiveStationSubMenuMapper.SpellSchoolPassiveStationTarget>();
        RegisterComponent<TraderMenu.InitData>();
        RegisterComponent<TraderSubMenuMapper.TraderMenuTarget>();
        RegisterComponent<UnitSpawnerstationMenu.InitData>();
        RegisterComponent<UnitSpawnerstationSubMenuMapper.UnitSpawnerstationTarget>();
        RegisterComponent<UseServantMenu.InitData>();
        RegisterComponent<WorkstationMenu.InitData>();
        // RegisterComponent<WorkstationSubMenuMapper.WorkstationTarget>();
        RegisterComponent<UICanvasSingleton>();
        RegisterComponent<MainMenuUICanvasSingleton>();
        RegisterComponent<FullscreenMenu.InitData>();
        RegisterComponent<HUDElementData>();
        RegisterComponent<HideInteractHUDGamepad>();
        RegisterComponent<MapMenu.InitData>();
        RegisterComponent<BasicAnnouncement>();
        RegisterComponent<UiPolygonMesh>();
        RegisterComponent<PersistentReplayData>();
        RegisterComponent<OpenMenuEvent>();
        RegisterComponent<ToggleDebugMenuEvent>();
        RegisterComponent<ToggleChatEvent>();
        RegisterComponent<ChatInputFocused>();
        RegisterComponent<HUDMenuManager.EmptyInitData>();
        RegisterComponent<NavigateToViewEvent>();
        RegisterComponent<EmptyInitData>();
        RegisterComponent<OptionsMenu.InitData>();
        RegisterComponent<PlayHostMenuView.InitData>();
        RegisterComponent<PlayJoinMenuView.InitData>();
        RegisterComponent<PlaySelectModeMenuView.InitData>();
        RegisterComponent<RebindingMenu.InitData>();
        RegisterComponent<UseCharacterHudProgressBar>();
        RegisterComponent<CurrentCastsSystem.Singleton>();
        RegisterComponent<AbilitySystemDamageTakenEventSinceLastUpdateData>();
        RegisterComponent<AbilityGroupSlotModificationBuffer>();
        RegisterComponent<AbilityGroupSlotModificationDestroy>();
        RegisterComponent<DebugEventsSystem.Debug_ApplyBuffDelayed>();
        RegisterComponent<FilterPlayerCharacterNamesSystem.Handled>();
        RegisterComponent<UnitCompositionSpawnerSystem_Spawn.Initialized>();
        RegisterComponent<VBloodConsumed>();
        RegisterComponent<EntitySpawnedMetadata>();
        RegisterComponent<EntityMetadata>();
        RegisterComponent<DraculaSpawnChain>();
        RegisterComponent<CastleHeartsRaidState>();
        RegisterComponent<CastleHeartsRaidStateEvent>();
        RegisterComponent<CreateGameplayEvents.Countered>();
        RegisterComponent<StatChangeMutationSystem.RegisteredListener>();
        RegisterComponent<UnitTestingObjectProxy>();
        RegisterComponent<SequenceInput>();
        RegisterComponent<SequenceDebugInfo>();
        RegisterComponent<SequenceBakingDependency>();
        RegisterComponent<AbilitySequence>();
        RegisterComponent<AbilityInterruptData>();
        RegisterComponent<MoveDuringCastActive>();
        RegisterComponent<AbilityBarInitializationState>();
        RegisterComponent<AbilityBar_Server>();
        RegisterComponent<AbilityBar_Client>();
        RegisterComponent<CastSequenceBuffer>();
        RegisterComponent<AbilityBar_Shared>();
        RegisterComponent<SetSceneSection>();
        RegisterComponent<Footstep>();
        RegisterComponent<SingletonPrefab>();
        RegisterComponent<LoadToTargetWorld>();
        RegisterComponent<StripForBuild>();
        RegisterComponent<CameraSweepPlaybackActive>();
        RegisterComponent<CameraSweepRecordActive>();
        RegisterComponent<CameraSweepSingleton>();
        RegisterComponent<RecordedCameraFrame>();
        RegisterComponent<CameraUser>();
        RegisterComponent<FreeCamera>();
        RegisterComponent<FreeCameraState>();
        RegisterComponent<HybridCameraInstancedTag>();
        RegisterComponent<HybridCamera>();
        RegisterComponent<HybridCameraFrustumPlanes>();
        RegisterComponent<HybridCameraData>();
        RegisterComponent<CameraTarget>();
        RegisterComponent<CustomCameraTarget>();
        RegisterComponent<OrbitCamera>();
        RegisterComponent<OrbitCameraState>();
        RegisterComponent<TopdownCamera>();
        RegisterComponent<TopdownCameraState>();
        RegisterComponent<HeightLevelCullingTag>();
        RegisterComponent<HeightLevelCullingAlwaysAboveTag>();
        RegisterComponent<CastleLimited>();
        RegisterComponent<CharacterCustomizationSettingsComponent>();
        RegisterComponent<MaleFacesEntry>();
        RegisterComponent<MaleHairsEntry>();
        RegisterComponent<MaleFeaturesEntry>();
        RegisterComponent<MaleAccessoriesEntry>();
        RegisterComponent<FemaleFacesEntry>();
        RegisterComponent<FemaleHairsEntry>();
        RegisterComponent<FemaleFeaturesEntry>();
        RegisterComponent<FemaleAccessoriesEntry>();
        RegisterComponent<CollisionDetectionSingleton>();
        RegisterComponent<Aggroable>();
        RegisterComponent<AggroConsumer>();
        RegisterComponent<GainAggroByAlert>();
        RegisterComponent<GainAggroByVicinity>();
        RegisterComponent<AggroBuffer>();
        RegisterComponent<InverseAggroBufferElement>();
        RegisterComponent<GainAlertByVicinity>();
        RegisterComponent<AlertBuffer>();
        RegisterComponent<AggroCandidateBufferElement>();
        RegisterComponent<AggroModifiers>();
        RegisterComponent<AlertModifiers>();
        RegisterComponent<AggroDamageHistoryBufferElement>();
        RegisterComponent<ExternalAggroBufferElement>();
        RegisterComponent<AggroDamageHistoryConfig>();
        RegisterComponent<AiPrioritization_Data>();
        RegisterComponent<AiPrioritization_State>();
        RegisterComponent<UseBossCenterPositionAsPreCombatPosition>();
        RegisterComponent<AiMoveSpeeds>();
        RegisterComponent<CastHistoryBufferElement>();
        RegisterComponent<CastHistoryData>();
        RegisterComponent<Faction>();
        RegisterComponent<FactionReference>();
        RegisterComponent<Follower>();
        RegisterComponent<FollowerBuffer>();
        RegisterComponent<MinionMaster>();
        RegisterComponent<MaxMinionsPerPlayerElement>();
        RegisterComponent<MinionMasterStats>();
        RegisterComponent<PrisonCell>();
        RegisterComponent<Imprisoned>();
        RegisterComponent<ServantInteractPointLocalTransform>();
        RegisterComponent<ShowAi>();
        RegisterComponent<VampireHunter>();
        RegisterComponent<AiPointOfInterest>();
        RegisterComponent<AiPointOfInterest_BossCenterPosition>();
        RegisterComponent<AmplifyBuff>();
        RegisterComponent<AmplifyStackModifier>();
        RegisterComponent<Attach>();
        RegisterComponent<AttachedBuffer>();
        RegisterComponent<BlockFeedBuff>();
        RegisterComponent<Blood>();
        RegisterComponent<BloodConsumeSource>();
        RegisterComponent<VBloodConsumeSource>();
        RegisterComponent<VBloodUnlockTechBuffer>();
        RegisterComponent<BlueprintData>();
        RegisterComponent<BlueprintRequirementBuffer>();
        RegisterComponent<ProgressionDependencyElement>();
        RegisterComponent<ProgressionUserContentDependency>();
        RegisterComponent<StationStateComponent>();
        RegisterComponent<StationServants>();
        RegisterComponent<CastleWorkstation>();
        RegisterComponent<PlacementDestroyData>();
        RegisterComponent<StationBonusBuffer>();
        RegisterComponent<SpawnedUnitsBuffer>();
        RegisterComponent<StationBonusData>();
        RegisterComponent<CharacterHUD>();
        RegisterComponent<CharmSource>();
        RegisterComponent<ClanInviteRequest_Shared>();
        RegisterComponent<ClanInviteRequest_Server>();
        RegisterComponent<ClanRole>();
        RegisterComponent<CustomizationFeatures>();
        RegisterComponent<CurrentGender>();
        RegisterComponent<DayNightCycle>();
        RegisterComponent<Dead>();
        RegisterComponent<DeathReason>();
        RegisterComponent<DestroyData>();
        RegisterComponent<DestroyState>();
        RegisterComponent<DestroyAfterDurationCounter>();
        RegisterComponent<DestroyAfterDuration>();
        RegisterComponent<DestroyAfterDuration_ActiveUserCheck>();
        RegisterComponent<DestroyTagEvent>();
        RegisterComponent<DestroyDataBakerEntities>();
        RegisterComponent<Door>();
        RegisterComponent<DoorRaidVisual>();
        RegisterComponent<DownedBuff>();
        RegisterComponent<DropItemAroundPosition>();
        RegisterComponent<DropTableData>();
        RegisterComponent<DropTableDataBuffer>();
        RegisterComponent<Emoter>();
        RegisterComponent<EmpowerBuff>();
        RegisterComponent<EmpowerStackModifier>();
        // RegisterComponent<Energy>();
        RegisterComponent<EntityOwner>();
        RegisterComponent<EntityCreator>();
        RegisterComponent<Equipped>();
        RegisterComponent<EquippableData>();
        RegisterComponent<EquipmentToggleData>();
        RegisterComponent<Equippable>();
        RegisterComponent<EquippableBuff>();
        RegisterComponent<EquipmentChangedEvent>();
        RegisterComponent<Equipment>();
        RegisterComponent<AbilityAimPrediction>();
        RegisterComponent<AbilityState>();
        RegisterComponent<AbilityCastCondition>();
        RegisterComponent<AbilityChargesState>();
        RegisterComponent<AbilityChargesData>();
        RegisterComponent<AbilityGroupState>();
        RegisterComponent<AbilityGroupInfo>();
        RegisterComponent<AbilityCastStartedEvent>();
        RegisterComponent<AbilityPreCastEndedEvent>();
        RegisterComponent<AbilityPostCastEndedEvent>();
        RegisterComponent<AbilityCastEndedEvent>();
        RegisterComponent<AbilityPreCastFinishedEvent>();
        RegisterComponent<AbilityPostCastFinishedEvent>();
        RegisterComponent<AbilityInterruptedEvent>();
        RegisterComponent<AbilityOwner>();
        RegisterComponent<AbilityGroupComboState>();
        RegisterComponent<AbilityStateBuffer>();
        RegisterComponent<AbilityGroupStartAbilitiesBuffer>();
        RegisterComponent<AbilityGroupSlotBuffer>();
        RegisterComponent<AbilityGroupSlot.DirtyTag>();
        RegisterComponent<AbilityGroupSlot.DirtyTag_CopyCooldown>();
        RegisterComponent<AbilityGroupSlot>();
        RegisterComponent<Age>();
        RegisterComponent<UpdateAgeWhenDisabled>();
        RegisterComponent<BloodBuff>();
        RegisterComponent<BloodBuffScript_Brute_HealthRegenBonus>();
        RegisterComponent<BloodBuffScript_Innocent_80>();
        RegisterComponent<BloodBuffScript_Rogue_MountDamageBonus>();
        RegisterComponent<BloodBuffScript_Draculin_BloodMendBonus>();
        RegisterComponent<BloodBuffScript_ChanceToResetCooldown>();
        RegisterComponent<BloodBuffScript_Scholar_MovementSpeedOnCast>();
        RegisterComponent<BloodBuffScript_Worker_ReducedDurability>();
        RegisterComponent<BloodBuffScript_Brute_NulifyAndEmpower>();
        RegisterComponent<BloodBuffScript_FirstStrike>();
        RegisterComponent<BloodBuffScript_LastStrike>();
        RegisterComponent<BloodShareBuff>();
        RegisterComponent<BloodShareBuff_ResetVBlood>();
        RegisterComponent<Buffable>();
        RegisterComponent<BuffBuffer>();
        RegisterComponent<BuffCategory>();
        RegisterComponent<Buff>();
        RegisterComponent<Buff_StacksIncreaseEvent>();
        RegisterComponent<Buff_Persists_Through_Death>();
        RegisterComponent<Buff_Destroy_On_Owner_Death>();
        RegisterComponent<CreateResetBuffAgeNetworkEvent>();
        RegisterComponent<BuffReappliedEvent>();
        RegisterComponent<DiminishingReturn>();
        RegisterComponent<DiminishingReturnBuff>();
        RegisterComponent<DiminishingReturnElement>();
        RegisterComponent<BuffInputBehaviorOverride>();
        RegisterComponent<BuffResistanceElement>();
        RegisterComponent<BuffResistances>();
        RegisterComponent<AbilityCooldownState>();
        RegisterComponent<AbilityCooldownData>();
        RegisterComponent<CreatedTime>();
        RegisterComponent<Dash>();
        RegisterComponent<DashSpawn>();
        RegisterComponent<DeathPvPTimer>();
        RegisterComponent<UpdateDeathPvPTimerWhenDisabled>();
        RegisterComponent<StackDeathPvPTimerModifier>();
        RegisterComponent<SpawnRandomDeathPvPTimer>();
        RegisterComponent<DestroyOnManualInterrupt>();
        // RegisterComponent<EnergyRequirement>();
        RegisterComponent<FreezeHybridAnimationData>();
        RegisterComponent<GlobalCooldown>();
        RegisterComponent<Hideable>();
        RegisterComponent<Hideable_CopyFromAttachParent>();
        RegisterComponent<HideTargetHUD>();
        RegisterComponent<HitTrigger>();
        RegisterComponent<KnockbackAssetsSingleton>();
        RegisterComponent<Knockback>();
        RegisterComponent<LifeTime>();
        RegisterComponent<UpdateLifeTimeWhenDisabled>();
        RegisterComponent<StackLifeTimeModifier>();
        RegisterComponent<SpawnRandomLifeTime>();
        RegisterComponent<MagicSourceDurabilityRequirement>();
        RegisterComponent<ModifyStunCloth_Data>();
        RegisterComponent<ModifyTargetHUDBuff>();
        RegisterComponent<ModifyUnitBaseStatsTypeBuff>();
        RegisterComponent<ModifyUnitLevelBuff>();
        RegisterComponent<OverrideInitialAgeBakingSystem.OverrideInitialAgeBaker>();
        RegisterComponent<Projectile>();
        RegisterComponent<HomingSpellTag>();
        RegisterComponent<ProjectileDestroyData>();
        RegisterComponent<ReplaceAbilityOnSlotBuff>();
        RegisterComponent<ReplaceAbilityOnSlotBuff_WithCondition>();
        RegisterComponent<ReplaceAbilityOnSlotBuff_AllInitialized>();
        RegisterComponent<ReplaceAbilityOnSlotData>();
        RegisterComponent<RespawnCharacter>();
        RegisterComponent<ScaleProjectileRangeByChargeFactor>();
        RegisterComponent<RunScriptOnCastStarted>();
        RegisterComponent<RunScriptOnCastUpdate>();
        RegisterComponent<RunScriptOnPreCastFinished>();
        RegisterComponent<RunScriptOnPreCastEnded>();
        RegisterComponent<RunScriptOnPostCastFinished>();
        RegisterComponent<RunScriptOnPostCastEnded>();
        RegisterComponent<RunScriptOnCastEnded>();
        RegisterComponent<RunScriptOnInterrupted>();
        RegisterComponent<Script_ConfuseDummy_DataServer>();
        RegisterComponent<Script_ConfuseDummy_BuffedEntitiesBuffer>();
        RegisterComponent<Script_HomingSpell_DataShared>();
        RegisterComponent<ServantData>();
        RegisterComponent<AttachToCharacterTransformBuff>();
        RegisterComponent<AbilitySpawnPrefabOnCast>();
        RegisterComponent<SpellMovement>();
        RegisterComponent<DisableableSpellMovement>();
        RegisterComponent<Stealthable>();
        RegisterComponent<TargetAoE>();
        RegisterComponent<TeleportBuff>();
        RegisterComponent<TravelBuff>();
        RegisterComponent<TravelBuffSpawn>();
        RegisterComponent<TutorialPointPosition>();
        RegisterComponent<VBloodAbilityData>();
        RegisterComponent<VBloodAbilityReplaceBuff>();
        RegisterComponent<Health>();
        RegisterComponent<HealthConstants>();
        RegisterComponent<LowHealthEffect>();
        RegisterComponent<DynamicallyWeakenAttackers>();
        RegisterComponent<IgnorePvETag>();
        RegisterComponent<Immortal>();
        RegisterComponent<InventoryBuffer>();
        RegisterComponent<InventoryChangedEvent>();
        RegisterComponent<RestrictedInventory>();
        RegisterComponent<StartItemBuffer>();
        RegisterComponent<InventoryItem>();
        RegisterComponent<InventoryOwner>();
        RegisterComponent<InventoryConnection>();
        RegisterComponent<InventoryInstanceElement>();
        RegisterComponent<InventoryStartItems>();
        // RegisterComponent<IsTransformed>();
        RegisterComponent<ItemData>();
        RegisterComponent<ItemSet>();
        RegisterComponent<ItemDataDropGroup>();
        RegisterComponent<ItemDataDropGroupBuffer>();
        RegisterComponent<ItemPickAchievementEvent>();
        RegisterComponent<LastTranslation>();
        RegisterComponent<ManualFirstFrameLastTranslation>();
        RegisterComponent<LightningRodStation>();
        RegisterComponent<AttachMapIconsToEntity>();
        RegisterComponent<DeathContainerMapIcon>();
        RegisterComponent<MapIconData>();
        RegisterComponent<MapIconPosition>();
        RegisterComponent<MapIconTargetEntity>();
        RegisterComponent<PlayerMapIcon>();
        RegisterComponent<MapPylonArea>();
        RegisterComponent<RelicSpawnBoundMapIcon>();
        RegisterComponent<RelicMapIcon>();
        RegisterComponent<StartGraveyardMapIcon>();
        RegisterComponent<WaypointMapIcon>();
        RegisterComponent<MicroPOIConfig>();
        RegisterComponent<MicroPOIUnitSpawnerElement>();
        RegisterComponent<MicroPOIUnitSpawner>();
        RegisterComponent<MicroPOIInstance>();
        RegisterComponent<ActiveMicroPOIObjects>();
        RegisterComponent<SubSceneMicroPOIManager>();
        RegisterComponent<MicroPOIManager>();
        RegisterComponent<MicroPOIManagerConfig>();
        RegisterComponent<Minion>();
        RegisterComponent<KillAllMinionsEvent>();
        RegisterComponent<MinionBuffer>();
        RegisterComponent<MinionRemovedEvent>();
        RegisterComponent<MountBuff>();
        RegisterComponent<MoveEntity>();
        RegisterComponent<Movement>();
        RegisterComponent<MoveStopAbilityData>();
        RegisterComponent<NetherSpawnPositionMetadata>();
        RegisterComponent<NetherSpawnPosition>();
        RegisterComponent<PavementBonus>();
        RegisterComponent<PavementBonusSource>();
        RegisterComponent<CollisionRadius>();
        RegisterComponent<MapCollision>();
        RegisterComponent<ProjectM.Velocity>();
        RegisterComponent<PlayerCharacter>();
        RegisterComponent<PlayerLastValidPosition>();
        RegisterComponent<PlayerCharacter_Client>();
        RegisterComponent<ChunkScenePortalMetadata>();
        RegisterComponent<ChunkPortal>();
        RegisterComponent<ProgressionMapper>();
        RegisterComponent<RecipeData>();
        RegisterComponent<RecipeRequirementBuffer>();
        RegisterComponent<ItemRepairBuffer>();
        RegisterComponent<RecipeOutputBuffer>();
        RegisterComponent<RecipeOutputUnitBuffer>();
        RegisterComponent<RecipeLinkBuffer>();
        RegisterComponent<Refinementstation>();
        RegisterComponent<Prisonstation>();
        RegisterComponent<Salvagestation>();
        RegisterComponent<RefinementstationRecipesBuffer>();
        // RegisterComponent<Workstation>();
        RegisterComponent<WorkstationRecipesBuffer>();
        RegisterComponent<DiscoverCostBuffer>();
        RegisterComponent<ResearchStation>();
        RegisterComponent<ResearchBuffer>();
        RegisterComponent<HaveUnlocksInStation>();
        RegisterComponent<TechData>();
        RegisterComponent<TechUnlockRecipeBuffer>();
        RegisterComponent<TechUnlockBlueprintBuffer>();
        RegisterComponent<TechRequirementBuffer>();
        RegisterComponent<TechItemRequirementBuffer>();
        RegisterComponent<NoECSTransformTag>();
        RegisterComponent<ReplaceDropTableElement>();
        RegisterComponent<ReplaceRandomizedSpawnChainElement>();
        RegisterComponent<ReplaceMicroPOIManagerElement>();
        RegisterComponent<RespawnPoint>();
        RegisterComponent<Script_GetLifeTimeFromRespawnSettings_DataServer>();
        RegisterComponent<SequenceGUID>();
        RegisterComponent<ServantEquipment>();
        RegisterComponent<Shapeshift>();
        RegisterComponent<PrefabPreview>();
        RegisterComponent<PrefabPreviewInstance>();
        RegisterComponent<RandomizedSpawnChain>();
        RegisterComponent<RandomizedSpawnChainChild>();
        RegisterComponent<RandomizedSpawnChainSettings>();
        RegisterComponent<AutoChainInstanceData>();
        RegisterComponent<NetworkedSpawnChainChild>();
        RegisterComponent<SpawnChainChild>();
        RegisterComponent<SpawnChainTransitionEvent>();
        RegisterComponent<SpawnChainData.ActiveElementsChangedEvent>();
        RegisterComponent<SpawnChainData.ActiveChildElement>();
        RegisterComponent<SpawnChainData.SpawnChainConstants>();
        RegisterComponent<SpawnChainData.SpawnChainInstance>();
        RegisterComponent<SpawnChainData.SpawnChainBlueprint>();
        RegisterComponent<SpawnChainData.QueuedTransitionRequests>();
        RegisterComponent<CharacterRespawnedEvent>();
        RegisterComponent<SpawnCharacter>();
        RegisterComponent<SpawnedBy>();
        RegisterComponent<SpawnTransform>();
        RegisterComponent<NamePostfixGenerator>();
        RegisterComponent<NamePrefixGenerator>();
        RegisterComponent<SpellSchoolAbility>();
        RegisterComponent<SpellSchoolPassive>();
        RegisterComponent<AbilitySpellSchool>();
        RegisterComponent<Passive>();
        // RegisterComponent<PassiveBuffer>();
        RegisterComponent<SpellSchoolPassiveStation>();
        RegisterComponent<LearnablePassivesBuffer>();
        RegisterComponent<StatChangeEventCallback>();
        RegisterComponent<BloodQualityChange>();
        RegisterComponent<StatChangeEvent>();
        RegisterComponent<SunDamageDebuff>();
        RegisterComponent<SyncAttachedTranslation>();
        RegisterComponent<TargetDirection>();
        RegisterComponent<CastleTeam>();
        RegisterComponent<CastleTeamData>();
        RegisterComponent<ClanTeam>();
        RegisterComponent<ClanMemberStatus>();
        RegisterComponent<TeamAllies>();
        RegisterComponent<TeamData>();
        RegisterComponent<Team>();
        RegisterComponent<TeamReference>();
        RegisterComponent<UserTeam>();
        RegisterComponent<NeutralTeam>();
        RegisterComponent<UnitTeam>();
        RegisterComponent<ChangedTeamEvent>();
        RegisterComponent<RefreshTeamEvent>();
        RegisterComponent<DirtyTileBoundsManager.Singleton>();
        RegisterComponent<ShowTileCollision>();
        RegisterComponent<TileModelRegistrationState>();
        RegisterComponent<CustomDirtyTileBoundsEvent>();
        RegisterComponent<SkipMergeDirtyWorldBounds>();
        RegisterComponent<TileBounds>();
        RegisterComponent<TilePosition>();
        RegisterComponent<TileModelSpatialData>();
        RegisterComponent<TileData>();
        RegisterComponent<TileCollisionTag>();
        RegisterComponent<TilePathfindingTag>();
        RegisterComponent<TileSurfaceFluffTag>();
        RegisterComponent<TileHeightTag>();
        RegisterComponent<TileLineOfSightTag>();
        RegisterComponent<AiTileLineOfSightTag>();
        RegisterComponent<TilePlacementTag>();
        RegisterComponent<TileRestrictionAreaTag>();
        RegisterComponent<TraderItemData>();
        RegisterComponent<UnitRespawnTime>();
        RegisterComponent<UnlockedProgressionElement>();
        RegisterComponent<UserOwner>();
        RegisterComponent<UserOwner_Client>();
        RegisterComponent<VBloodAbilityOwnerData>();
        RegisterComponent<VBloodAbilityBuffEntry>();
        RegisterComponent<VBloodUnit>();
        RegisterComponent<VolumeCompanionBoxCollider>();
        RegisterComponent<VolumeCompanionSphereCollider>();
        RegisterComponent<VolumeCompanionInstantiated>();
        RegisterComponent<CastleWaypoint>();
        RegisterComponent<ChunkWaypointMetadata>();
        RegisterComponent<ChunkWaypoint>();
        RegisterComponent<ReturnToNetherWaypoint>();
        RegisterComponent<StartGraveyardExitWaypoint>();
        RegisterComponent<UnlockedWaypointElement>();
        RegisterComponent<WeakenBuff>();
        RegisterComponent<WeakenStackModifier>();
        RegisterComponent<WorkstationAssignedServant>();
        RegisterComponent<WoundedConstants>();
        RegisterComponent<RegisterCurveBlobEvent>();
        RegisterComponent<DrawGridBuffer>();
        RegisterComponent<DrawGrid>();
        RegisterComponent<LogEntitySpawnDestroy>();
        RegisterComponent<Spawn_Debug>();
        RegisterComponent<Destroy_Debug>();
        RegisterComponent<SyncedServerDebugSettings>();
        RegisterComponent<EditableTileModel>();
        RegisterComponent<EditableTileModel_Client>();
        RegisterComponent<GameDataConversionUtilities.NonConvertedPrefabTag>();
        RegisterComponent<GameDataInitializedSingleton>();
        RegisterComponent<GameDataLoadingStartedSingleton>();
        RegisterComponent<GameDataSubSceneTag>();
        RegisterComponent<GameDataSubSceneSystem.HasRemovedSceneTags>();
        RegisterComponent<PersistenceDebuggingSingleton>();
        RegisterComponent<RootPrefabCollection>();
        RegisterComponent<ServerRootPrefabCollection>();
        RegisterComponent<WaitingForSceneLoad>();
        RegisterComponent<SceneLoadSystem.SystemData>();
        RegisterComponent<SceneLoadSystem.SceneLoadSystem_ActiveSceneLoad>();
        RegisterComponent<ServerRuntimeSettings>();
        RegisterComponent<ConversionSettings>();
        RegisterComponent<SubSceneRemapping>();
        RegisterComponent<TrackSceneLoadingTimesSystem.TrackedLoad>();
        RegisterComponent<AdjustFlyHeightBuff>();
        RegisterComponent<AdjustFlyHeightBuffModifications>();
        RegisterComponent<AnnounceCastleBreached>();
        RegisterComponent<AnnounceSiegeWeapon>();
        RegisterComponent<ArmorLevel>();
        RegisterComponent<ArmorLevelSource>();
        RegisterComponent<BloodBuffModifier>();
        RegisterComponent<BloodMoonBuff>();
        RegisterComponent<BloodMoonBuffState>();
        RegisterComponent<BuffableFlagState>();
        RegisterComponent<BuffModificationFlagData>();
        RegisterComponent<ConditionBuffModificationFlagData>();
        RegisterComponent<CanFly>();
        RegisterComponent<ChasmEruption>();
        RegisterComponent<DamagedEditableTile>();
        RegisterComponent<DamageTypeData>();
        RegisterComponent<DealDamageEvent>();
        RegisterComponent<DealDamageOnGameplayEvent>();
        RegisterComponent<DropItemImpairedBuff>();
        RegisterComponent<EntityCategory>();
        RegisterComponent<EquipmentImpairedBuff>();
        RegisterComponent<Explosive>();
        RegisterComponent<FeedableInventory>();
        RegisterComponent<MiscItemLevel>();
        RegisterComponent<MiscItemLevelSource>();
        RegisterComponent<JewelLevelSource>();
        RegisterComponent<LifeLeech>();
        RegisterComponent<LightningStike>();
        RegisterComponent<ModifyUnitStatBuff_IncreaseWithStacks>();
        RegisterComponent<ModifyUnitStatBuff_DOTS>();
        RegisterComponent<Mounter>();
        RegisterComponent<RadialDamageTarget>();
        // RegisterComponent<Resident>();
        RegisterComponent<ReviveCancelBuff>();
        RegisterComponent<ServantPower>();
        RegisterComponent<ServantPowerConstants>();
        RegisterComponent<ShatteredItemRepairCost>();
        RegisterComponent<ShatteredItem>();
        RegisterComponent<SiegeWeapon>();
        RegisterComponent<SpawnBuffElement>();
        RegisterComponent<ApplyBuffOnSpawn>();
        RegisterComponent<ReapplySpawnBuffOnReturn>();
        RegisterComponent<SpellBlockWhileImmaterial>();
        RegisterComponent<SpellLevel>();
        RegisterComponent<SpellLevelSource>();
        RegisterComponent<TakeDamageInSun>();
        RegisterComponent<TakeDamageInSunDebuffState>();
        RegisterComponent<UnitLevel>();
        RegisterComponent<UnitLevelChanged>();
        RegisterComponent<UnitLevelServerData>();
        RegisterComponent<UnitBaseStatsTypeChanged>();
        RegisterComponent<VampireDownedBuff>();
        RegisterComponent<VisibleFromFlight>();
        RegisterComponent<Vision>();
        RegisterComponent<EntitiesInView_Server>();
        RegisterComponent<WeaponLevel>();
        RegisterComponent<WeaponLevelSource>();
        RegisterComponent<GameplayEventListeners>();
        RegisterComponent<HolyAreaDebuff>();
        RegisterComponent<AimAssistConfigComponent>();
        RegisterComponent<CursorPosition>();
        RegisterComponent<EnableGamepadCursor>();
        RegisterComponent<EntityInput>();
        RegisterComponent<EntityAbilityInput>();
        RegisterComponent<EntityAimData>();
        RegisterComponent<MoveVelocity>();
        RegisterComponent<IgnoreAimTarget>();
        RegisterComponent<UserFocusPoint>();
        RegisterComponent<ModificationsRegistry>();
        RegisterComponent<ModificationCleanupSingleton>();
        RegisterComponent<DisabledWaitingForSync>();
        RegisterComponent<DisableWhenNoPlayersInRange>();
        RegisterComponent<PreventDisableWhenNoPlayersInRange>();
        RegisterComponent<DisableWhenNoPlayersInRangeOfChunk>();
        RegisterComponent<CanPreventDisableWhenNoPlayersInRange>();
        RegisterComponent<WasDisabledBeforeNoPlayersInRange>();
        RegisterComponent<DisabledDueToNoPlayersInRange>();
        RegisterComponent<ToggleDisabledEvent>();
        RegisterComponent<ToggleDisabledDueToTimeoutEvent>();
        RegisterComponent<MegaStaticCompatibleTag>();
        RegisterComponent<MegaStaticTag>();
        RegisterComponent<ControlledBy>();
        RegisterComponent<Controller>();
        RegisterComponent<ControllerMoveSpeedOverride>();
        RegisterComponent<PathWaypointNode>();
        RegisterComponent<PathWaypointNodeWait>();
        RegisterComponent<PathWaypointNeighbours>();
        RegisterComponent<PathSettings>();
        RegisterComponent<ShowWorldPathsEnabled>();
        RegisterComponent<FormationOffsetBuffer>();
        RegisterComponent<PatrolState>();
        RegisterComponent<MovePatrolState>();
        RegisterComponent<GlobalPatrolState.Initialized>();
        RegisterComponent<GlobalPatrolState>();
        RegisterComponent<WaypointTargetBufferEntry>();
        RegisterComponent<PatrolBusStopNode>();
        RegisterComponent<PrefabSetBuffer>();
        RegisterComponent<PrefabSetSourceObjectBuffer>();
        RegisterComponent<ResistanceData>();
        RegisterComponent<GameplayEventsData>();
        RegisterComponent<DeathEvent>();
        RegisterComponent<GlobalDeathListener>();
        RegisterComponent<OnKillListener>();
        RegisterComponent<OnDeathListener>();
        RegisterComponent<StatChangeListener>();
        RegisterComponent<DestroyWhenSequenceIsDestroyed>();
        RegisterComponent<DestroySequenceWhenSelfIsDestroyed>();
        RegisterComponent<ServerTime>();
        RegisterComponent<DayTimeSpan>();
        RegisterComponent<KnockbackEvent>();
        RegisterComponent<RagdollSourceSetting>();
        RegisterComponent<UnitUptimeSetting>();
        RegisterComponent<UnitStatsSettingsElement>();
        RegisterComponent<CommonClientData>();
        RegisterComponent<CurveCollection>();
        RegisterComponent<FactionLookupSingleton>();
        RegisterComponent<GameDatas>();
        RegisterComponent<ProgressionDependencyData>();
        RegisterComponent<ServerGameBalanceSettings>();
        RegisterComponent<RemappedPrefabDataLookup>();
        RegisterComponent<BeforeStartSimulationGroupBarrier.Singleton>();
        RegisterComponent<DestroyEntitiesBarrier_Server.Singleton>();
        RegisterComponent<StartSimulationGroupBarrier.Singleton>();
        RegisterComponent<EndDeserializeBarrier.Singleton>();
        RegisterComponent<PostUpdateBarrier.Singleton>();
        RegisterComponent<DestroyBarrier.Singleton>();
        RegisterComponent<SpawnBarrier.Singleton>();
        RegisterComponent<AfterRecursiveSpawnDestroyBarrier.Singleton>();
        RegisterComponent<SerializeBarrier.Singleton>();
        RegisterComponent<DestroyEntitiesBarrier_Client.Singleton>();
        RegisterComponent<TimeZonedDateTime>();
        RegisterComponent<MapZoneCollection>();
        RegisterComponent<DisabledWaitingForTransform>();
        RegisterComponent<GuaranteedStaticTransform>();
        RegisterComponent<StaticTransformCompatible>();
        RegisterComponent<StaticTransformElement>();
        RegisterComponent<StaticTransformIndex>();
        RegisterComponent<StaticTransformBakingComponent>();
        RegisterComponent<GeneralGameplayCollection>();
        RegisterComponent<SCTTypeCollection>();
        RegisterComponent<ScrollingCombatTextMessage>();
        RegisterComponent<UnitCompositionGroupEntry>();
        RegisterComponent<UnitCompositionGroupUnitEntry>();
        RegisterComponent<VBloodUnitSpawnSource>();
        RegisterComponent<UnitCompositionActiveUnit>();
        RegisterComponent<UnitCompositionSpawnerDebugName>();
        RegisterComponent<UnitCompositionSpawner>();
        RegisterComponent<UnitStats>();
        RegisterComponent<DamageCategoryStats>();
        RegisterComponent<ResistCategoryStats>();
        RegisterComponent<UserInfoBufferSingleton>();
        RegisterComponent<UserInfoElement>();
        RegisterComponent<AggroRequests.Clear>();
        RegisterComponent<AggroRequests.Copy>();
        RegisterComponent<AggroRequests.Add>();
        RegisterComponent<AggroRequests.Remove>();
        RegisterComponent<InverseAggroEvents.Added>();
        RegisterComponent<InverseAggroEvents.Removed>();
        RegisterComponent<AiDamageTakenEvent>();
        RegisterComponent<AiMove_Shared>();
        RegisterComponent<AiMove_Server>();
        RegisterComponent<AiMove_Client>();
        RegisterComponent<UnitSpawnData>();
        RegisterComponent<GenericCombatMovementData>();
        RegisterComponent<AiDebugEnabled>();
        RegisterComponent<DelayedAggroEvent>();
        RegisterComponent<MiscAiGameplayData>();
        RegisterComponent<IsMinion>();
        RegisterComponent<ServantAssignedWorkstation>();
        RegisterComponent<ServantPreferredWorkstationsBuffer>();
        RegisterComponent<DestroyedDuringConversion>();
        RegisterComponent<ConversionUtilities.UnmergedStripFromWorld>();
        RegisterComponent<RegisterPrefabInheritance>();
        RegisterComponent<WorldFrame>();
        RegisterComponent<TransmogAssetKeyBlobData>();
        RegisterComponent<TransmogData>();
        RegisterComponent<TransmogModeBuff>();
        RegisterComponent<TransmogModeSingleton>();
        RegisterComponent<ControllableAreaIdBuffer>();
        RegisterComponent<BakingOnlyRoadBuffer>();
        RegisterComponent<MakeChildRenderersHideableSceneryTag>();
        RegisterComponent<HideableSceneryObject>();
        RegisterComponent<MapZoneDataPacked>();
        RegisterComponent<MapZoneData>();
        RegisterComponent<MapZonePolygonVertexElement>();
        RegisterComponent<MapZoneDiscoverableElement>();
        RegisterComponent<MapZoneDebugEnabled>();
        RegisterComponent<ParentTerrain>();
        RegisterComponent<ProcessChunkTask>();
        RegisterComponent<SkipSubsceneTranslation>();
        RegisterComponent<ChunkBaseTerrainHeights>();
        RegisterComponent<ChunkCellBaseHeightLevel>();
        RegisterComponent<ChunkTerrainHeights>();
        RegisterComponent<ChunkBaseGameplayHeights>();
        RegisterComponent<TerrainChunk>();
        RegisterComponent<TerrainChunkShared>();
        RegisterComponent<AttachTerrainChunkSharedRecursiveWhileBaking>();
        RegisterComponent<LoadSubSceneOnStartup>();
        RegisterComponent<LoadTerrainChunkRequest>();
        RegisterComponent<TerrainChunkMetadata>();
        RegisterComponent<TerrainChunkPortalBuffer>();
        RegisterComponent<MapZoneNameOverride>();
        RegisterComponent<MapIconNameOverride>();
        RegisterComponent<TerrainChunkLoadedEvent>();
        RegisterComponent<TerrainChunkUnloadedEvent>();
        RegisterComponent<TerrainChunkMetadataLoadedEvent>();
        RegisterComponent<TerrainTag>();
        RegisterComponent<TerrainChunkOffset>();
        RegisterComponent<TerrainChunkLookup>();
        RegisterComponent<TerrainManager.SystemData>();
        RegisterComponent<TerrainManager.ProcessedMetadataTag>();
        RegisterComponent<TerrainManager.LoadedMetadataTag>();
        RegisterComponent<TerrainManager.StartedLoadingTag>();
        RegisterComponent<TerrainManager.RegisteredLoadedTerrainChunk>();
        RegisterComponent<TerrainPaintedTiles>();
        RegisterComponent<PaintedTilesForBaking>();
        RegisterComponent<WorldAssetSingleton>();
        RegisterComponent<WorldAssetChunks>();
        RegisterComponent<WorldConfigSingleton>();
        RegisterComponent<EditorSpawnChunk>();
        RegisterComponent<EditorChunkToLoadOnStartupElement>();
        RegisterComponent<WorldRegionPolygon>();
        RegisterComponent<WaypointRegionPolygon>();
        RegisterComponent<WorldRegionPolygonVertex>();
        RegisterComponent<CurrentWorldRegion>();
        RegisterComponent<CurrentWorldRegionChangedEvent>();
        RegisterComponent<TerritoryWorldRegion>();
        RegisterComponent<ChunkRoadGraph>();
        RegisterComponent<RoadPathfindingRequest>();
        RegisterComponent<RoadPathfindingResult>();
        RegisterComponent<RoadTypePathfindingWeightsElement>();
        RegisterComponent<WorldRoadGraph>();
        RegisterComponent<ImpactMaterial>();
        RegisterComponent<ImpactMaterialMappingBuffer>();
        RegisterComponent<SpawnSequenceForEntity>();
        RegisterComponent<SuccessfullySpawnedSequence>();
        RegisterComponent<NoFadeOut>();
        RegisterComponent<DebugShowPhysicsCasts>();
        RegisterComponent<RedirectCollisionChecksToParent>();
        RegisterComponent<TerrainColliderMemorySummary>();
        RegisterComponent<WorldRoadGraphSystem.RoadGraphInitialized>();
        RegisterComponent<CommonGamepadVibration>();
        RegisterComponent<DualsenseVibration>();
        RegisterComponent<HapticBuildModeFeedback>();
        RegisterComponent<HapticEvent>();
        RegisterComponent<OnDamagedHapticEvent>();
        RegisterComponent<HapticVibration>();
        RegisterComponent<GameplayEventDebuggingData>();
        RegisterComponent<InitializeGameplayScriptsEvent>();
        RegisterComponent<HashedTypesBuffer>();
        RegisterComponent<GenericEvent>();
        RegisterComponent<GenericEventListener>();
        RegisterComponent<MessageFunctionEvent>();
        RegisterComponent<ListenerTag>();
        RegisterComponent<OnSpawnedCallback>();
        RegisterComponent<ScriptSpawn>();
        RegisterComponent<ScriptUpdate>();
        RegisterComponent<ScriptDestroy>();
        RegisterComponent<ScheduledFunction>();
        RegisterComponent<Trigger>();
        RegisterComponent<Trigger_OverlappingSphere>();
        RegisterComponent<Networked>();
        RegisterComponent<AlwaysNetworked>();
        RegisterComponent<NetworkedTimeout>();
        RegisterComponent<DisabledDueToTimeout>();
        RegisterComponent<NetworkedSettings>();
        RegisterComponent<SyncToUserBuffer>();
        RegisterComponent<UpToDateUserBitMask>();
        RegisterComponent<SyncToUserBitMask>();
        RegisterComponent<OnlySyncToUsersTag>();
        RegisterComponent<IsConnected>();
        RegisterComponent<ConnectedUser>();
        RegisterComponent<Latency>();
        RegisterComponent<ClientNetworkState>();
        RegisterComponent<ReceivedServerFrame>();
        RegisterComponent<ServerNetworkState>();
        RegisterComponent<IncomingClientMessage>();
        RegisterComponent<NetSnapshot>();
        RegisterComponent<FrameChanged>();
        RegisterComponent<SnapshotFrameChangedBuffer>();
        RegisterComponent<OutgoingNetBuffer>();
        RegisterComponent<IncomingNetBuffer>();
        RegisterComponent<NetworkedBakingTag>();
        RegisterComponent<NetworkId>();
        RegisterComponent<NetworkIdSystem.Singleton>();
        RegisterComponent<NetworkSnapshotType>();
        RegisterComponent<NetworkSnapshot>();
        RegisterComponent<ClientNetworkSnapshotState>();
        RegisterComponent<UserDestroyedEntityBuffer>();
        RegisterComponent<SyncAlias_Translation>();
        RegisterComponent<SyncAlias_Rotation>();
        RegisterComponent<SyncBoundingBox>();
        RegisterComponent<InputCommandData>();
        RegisterComponent<InputCommandState>();
        RegisterComponent<User>();
        RegisterComponent<UserStats>();
        RegisterComponent<UserVisitedRegions>();
        RegisterComponent<SetLocalUserIndexEvent>();
        RegisterComponent<DisconnectedTimer>();
        RegisterComponent<DisabledDueToInactivity>();
        RegisterComponent<UserHeartCount>();
        RegisterComponent<UserControllerData>();
        RegisterComponent<UserTutorialProgression>();
        RegisterComponent<InputCommandDataProxy>();
        RegisterComponent<LocalUser>();
        RegisterComponent<LocalCharacter>();
        RegisterComponent<LocalControlled>();
        RegisterComponent<UserNetBuffer>();
        RegisterComponent<PriorityEntitiesToSerializeBuffer>();
        RegisterComponent<PanicEntitiesToSerializeBuffer>();
        RegisterComponent<UserEntityNetworkState>();
        RegisterComponent<TileCollisionHistoryElement>();
        RegisterComponent<TileGameplayHeightsHistoryElement>();
        RegisterComponent<TileCollisionHistoryMetadataElement>();
        RegisterComponent<TileDisabledCollisionHistoryElement>();
        RegisterComponent<DiscoveredMapZoneElement>();
        RegisterComponent<ModifyRotationDuringCast>();
        RegisterComponent<ModifyRotation>();
        RegisterComponent<ModifyMovementDuringCastActive>();
        RegisterComponent<ModifyMovementDuringCastData>();
        RegisterComponent<MoveDuringCastData>();
        RegisterComponent<InputCommandStateHistoryBufferElement>();
        RegisterComponent<InputCommandBufferElement>();
        RegisterComponent<UserActivityGrid>();
        RegisterComponent<ClanSystemSettingsComponent>();
        RegisterComponent<Script_CursedAreaDebuff_DataServer>();
        RegisterComponent<Script_CurseAreaDebuff_DataShared>();
        RegisterComponent<Script_GarlicAreaDebuff_DataServer>();
        RegisterComponent<Script_GarlicAreaDebuff_DataShared>();
        RegisterComponent<Script_SilverDebuff_DataServer>();
        RegisterComponent<BehaviourTreeBlackboardSize>();
        RegisterComponent<BehaviourTreeInstance>();
        RegisterComponent<BehaviourTreeBlackboardEntityFieldElement>();
        RegisterComponent<BehaviourTreeBlackboardDebugElement>();
        RegisterComponent<BehaviourTreeBinding>();
        RegisterComponent<AiDebugTarget>();
        RegisterComponent<ExternalBehaviourTreeTransitionRequest>();
        RegisterComponent<AbilityRange>();
        RegisterComponent<BehaviourTreeState>();
        RegisterComponent<BehaviourTreeStateMetadata>();
        RegisterComponent<BehaviourTreeStateChangedEvent>();
        RegisterComponent<BehaviourTreeStateBuffsBuffer>();
        RegisterComponent<BehaviourTreeStateActiveBuffsBuffer>();
        RegisterComponent<RegisterBehaviourTreeStateBuff>();
        RegisterComponent<EnableRoomRoofDebuggingSingleton>();
        RegisterComponent<RoofRootBlobElement>();
        RegisterComponent<RoofTileVariations>();
        RegisterComponent<RoofCategory>();
        RegisterComponent<TileModelDisabledChangeEvent>();
        RegisterComponent<DisabledTileModel>();
        RegisterComponent<TileModel>();
        RegisterComponent<TileModel_Client>();
        // RegisterComponent<RunCastleCleanupOnDeath>();
        RegisterComponent<TileModelLayer>();
        RegisterComponent<StaticTileModel>();
        RegisterComponent<BakedSurfaceFluffData>();
        RegisterComponent<BakedSurfaceFluffDataBounds>();
        RegisterComponent<UntransformedStaticTileWorld>();
        RegisterComponent<StaticTileWorld>();
        RegisterComponent<BakedTileData>();
        RegisterComponent<BakedCollisionTiles>();
        RegisterComponent<BakedCollisionTilesBoundsRef>();
        RegisterComponent<BakedLineOfSightTiles>();
        RegisterComponent<BakedLineOfSightTileDataBoundsRef>();
        RegisterComponent<BakedPlacementTiles>();
        RegisterComponent<BakedPlacementTilesBounds>();
        RegisterComponent<BakedPathfindingTileData>();
        RegisterComponent<BakedPathfindingTileDataBoundsRef>();
        RegisterComponent<TileWorldSingleton>();
        RegisterComponent<CastleBuildingAttachSettings>();
        RegisterComponent<CastleBuildingAllowReplaceSelf>();
        RegisterComponent<CastleBuildingMaxRange>();
        RegisterComponent<CastleHeart>();
        RegisterComponent<CastleHeartCurrentTeam>();
        RegisterComponent<CastleMemberNames>();
        RegisterComponent<CastleHeartConnection>();
        RegisterComponent<CastleHeartPhased>();
        RegisterComponent<CastleHeartPhasedPersistence>();
        RegisterComponent<ActiveServantMission>();
        RegisterComponent<CastleHeartVisuals>();
        RegisterComponent<CastleRebuildTransferContainer>();
        RegisterComponent<CastleTerritory>();
        RegisterComponent<CastleTerritoryBlocks>();
        RegisterComponent<CastleTerritoryTiles>();
        RegisterComponent<CastleTerritoryManager>();
        RegisterComponent<CastleTerritoryOccupant>();
        RegisterComponent<CastleTerritoryDecay>();
        RegisterComponent<ImmaterialWhileRaided>();
        RegisterComponent<RequireGroundedTag>();
        RegisterComponent<SwapArtWhileRaidedNew>();
        RegisterComponent<SwapArtWhileRaidedBaker>();
        RegisterComponent<SwapArtWhileRaidedRoot>();
        RegisterComponent<SwapArtWhileRaidedElement>();
        RegisterComponent<CastleFloor>();
        RegisterComponent<CastleFloorRoof>();
        RegisterComponent<CastleRoomConnection>();
        RegisterComponent<CastleTeleporterComponent>();
        RegisterComponent<CastleTeleporterElement>();
        RegisterComponent<CastleWallPillar>();
        RegisterComponent<CastleWallPillarImmaterial>();
        RegisterComponent<PlacementLimitToSet>();
        RegisterComponent<EnableLocalBuildingDebuggingSingleton>();
        RegisterComponent<CastleRebuildCommonTag>();
        RegisterComponent<CastleRebuildUniqueTag>();
        RegisterComponent<CastleRebuildRequiredTag>();
        RegisterComponent<CastleRebuildHiddenTag>();
        RegisterComponent<CastleRebuildUniqueKey>();
        // RegisterComponent<UnitBloodTypeBuffs>();
        RegisterComponent<LocalizedStringBuilderParameter>();
        RegisterComponent<DisableUISettingsSingleton>();
        RegisterComponent<GoToHUDMenu>();
        RegisterComponent<CarriageAttachIdleAISoundData>();
        RegisterComponent<IdleAISoundBuffer>();
        RegisterComponent<IdleAISound>();
        RegisterComponent<UpdateStudioParametersTag>();
        RegisterComponent<UISoundEvent>();
        RegisterComponent<StationMenuSounds>();
        RegisterComponent<HybridModelTransformData>();
        RegisterComponent<HybridModelPlayerTransformData>();
        RegisterComponent<UseHybridModel>();
        RegisterComponent<HybridModelOffset>();
        RegisterComponent<HybridModelSeed>();
        RegisterComponent<DeathRagdollForce>();
        RegisterComponent<AssetRebakingDependencyElement>();
        RegisterComponent<DontStripShouldHaveSpawnTagForTerrainChunks>();
        RegisterComponent<StripComponentFromWorldExceptBuffer>();
        RegisterComponent<StripEntityFromWorldExcept>();
        RegisterComponent<CastleWorkstationRecalculateLevel>();
        RegisterComponent<BagHolder>();
        RegisterComponent<DropTable>();
        RegisterComponent<DropTableOnDeath>();
        RegisterComponent<DropTableOnDestroy>();
        RegisterComponent<DropTableOnSalvageDestroy>();
        RegisterComponent<WasSalvaged>();
        RegisterComponent<DropTableBuffer>();
        RegisterComponent<RelicDropped>();
        RegisterComponent<Salvageable>();
        RegisterComponent<Durability>();
        RegisterComponent<LoseDurabilityOverTime>();
        RegisterComponent<DamageReductionPerTarget>();
        RegisterComponent<DamageReductionPerTargetElement>();
        RegisterComponent<IgnoreHitsPerTarget>();
        RegisterComponent<IgnoreHitsPerTargetElement>();
        RegisterComponent<Script_CarriageData>();
        RegisterComponent<SpellGroup>();
        RegisterComponent<GameplayTranslation>();
        RegisterComponent<Relic>();
        RegisterComponent<JewelInstance>();
        RegisterComponent<LegendaryItemInstance>();
        RegisterComponent<LegendaryItemTemplateBase>();
        RegisterComponent<LegendaryItemTemplate>();
        RegisterComponent<UpgradeableLegendaryItem>();
        RegisterComponent<UpgradeableLegendaryItemTiers>();
        RegisterComponent<GeneratedName>();
        RegisterComponent<JewelTemplate>();
        RegisterComponent<JewelInstanceSpawnData>();
        RegisterComponent<JewelArithmeticModification>();
        RegisterComponent<SpellModSetComponent>();
        RegisterComponent<LegendaryItemSpellModSetComponent>();
        RegisterComponent<AbilitySpellModItem>();
        RegisterComponent<LastAbilitySpellModItem>();
        RegisterComponent<AbilityJewelTemplate>();
        RegisterComponent<LegendaryItemGeneratorTemplate>();
        RegisterComponent<SpellModArithmetic>();
        RegisterComponent<SpellModArithmeticModifiable>();
        RegisterComponent<SpellModBlobReference>();
        RegisterComponent<SpellModBlobReference_UI>();
        RegisterComponent<SpellModCollectionData>();
        RegisterComponent<SpellModTierCollectionData>();
        RegisterComponent<SpellModPrefabGuid>();
        RegisterComponent<SpellModPrefabGuidModifiable>();
        RegisterComponent<SpellModSequenceGuid>();
        RegisterComponent<SpellModGlobalTierBlobReference>();
        RegisterComponent<ConsoleReady>();
        RegisterComponent<FallToHeight>();
        RegisterComponent<StaticPhysicsCollider>();
        // RegisterComponent<ConditionElement>();
        RegisterComponent<WarEventSettingsComponent>();
        RegisterComponent<WarEvent_DebugData>();
        RegisterComponent<WarEvent_ChildReference>();
        RegisterComponent<WarEvent>();
        RegisterComponent<Script_WarEvent_PortalToGateSequenceData>();
        RegisterComponent<Script_WarEvent_UnitKilledSequenceData>();
        RegisterComponent<Script_WarEvent_NodeData>();
        RegisterComponent<Script_WarEvent_NodeData_Client>();
        RegisterComponent<WarEvent_MapNode>();
        RegisterComponent<WarEvent_Gate>();
        RegisterComponent<WarEvent_ActiveGate>();
        RegisterComponent<WarEvent_NetworkedData>();
        RegisterComponent<WarEvent_NetworkedEntity>();
        RegisterComponent<WarEvent_NetworkedGate>();
        RegisterComponent<WarEvent_NetworkedPortal>();
        RegisterComponent<WarEvent_Portal>();
        RegisterComponent<WarEvent_ActivePortal>();
        RegisterComponent<WarEvent_ActiveUnit>();
        RegisterComponent<WarEvent_UnitPrefab>();
        RegisterComponent<WarEvent_Utilities.WarEvent_DropItems>();
        RegisterComponent<WarEvent_Utilities.WarEvent_DropItems_DropTables>();
        RegisterComponent<LocalToParent>();
        RegisterComponent<Rotation>();
        RegisterComponent<Scale>();
        RegisterComponent<NonUniformScale>();
        RegisterComponent<CompositeScale>();
        RegisterComponent<Translation>();
        RegisterComponent<Static>();
        RegisterComponent<SpawnTag>();
        RegisterComponent<DestroyTag>();
        RegisterComponent<StaticSceneTag>();
        RegisterComponent<DisallowEntityDestruction>();
        RegisterComponent<EntityManager.IsolateCopiedEntities>();
        RegisterComponent<RetainBlobAssets>();
        RegisterComponent<RetainBlobAssetBatchPtr>();
        RegisterComponent<RetainBlobAssetPtr>();
        RegisterComponent<BlobAssetOwner>();
        RegisterComponent<BeginInitializationEntityCommandBufferSystem.Singleton>();
        RegisterComponent<EndInitializationEntityCommandBufferSystem.Singleton>();
        RegisterComponent<BeginFixedStepSimulationEntityCommandBufferSystem.Singleton>();
        RegisterComponent<EndFixedStepSimulationEntityCommandBufferSystem.Singleton>();
        RegisterComponent<BeginVariableRateSimulationEntityCommandBufferSystem.Singleton>();
        RegisterComponent<EndVariableRateSimulationEntityCommandBufferSystem.Singleton>();
        RegisterComponent<BeginSimulationEntityCommandBufferSystem.Singleton>();
        RegisterComponent<EndSimulationEntityCommandBufferSystem.Singleton>();
        RegisterComponent<BeginPresentationEntityCommandBufferSystem.Singleton>();
        RegisterComponent<EntityGuid>();
        RegisterComponent<Disabled>();
        RegisterComponent<Prefab>();
        RegisterComponent<Asset>();
        RegisterComponent<LinkedEntityGroup>();
        RegisterComponent<SceneTag>();
        RegisterComponent<Simulate>();
        RegisterComponent<ChunkHeader>();
        RegisterComponent<BurstCompatibleComponentData>();
        RegisterComponent<BurstCompatibleSharedComponentData>();
        RegisterComponent<BurstCompatibleBufferElement>();
        RegisterComponent<CleanupEntity>();
        RegisterComponent<SceneSectionData>();
        RegisterComponent<SectionMetadataSetup>();
        RegisterComponent<SceneReference>();
        RegisterComponent<PrefabRoot>();
        RegisterComponent<SceneSection>();
        RegisterComponent<RequestSceneLoaded>();
        RegisterComponent<WorldTime>();
        RegisterComponent<WorldTimeQueue>();
        RegisterComponent<SystemInstance>();
        RegisterComponent<DotsSerialization.NodeHeader>();
        RegisterComponent<DotsSerialization.FolderNode>();
        RegisterComponent<DotsSerialization.StringTableNode>();
        RegisterComponent<DotsSerialization.RevisionedRawDataNode>();
        RegisterComponent<DotsSerialization.TypeNamesNode>();
        RegisterComponent<Script_Castleman_AdaptLevel_DataShared>();
        RegisterComponent<Script_Modify_Combat_Movement_Buff_Data>();
        RegisterComponent<Script_Modify_Combat_Movement_Buff_State>();
        RegisterComponent<Script_Modify_MountSpeed_Buff_Data>();
        RegisterComponent<Script_Modify_MountSpeed_Buff_State>();
        RegisterComponent<Script_UndeadLeader_Teleport_DataServer>();
        RegisterComponent<Script_BloodAltar_TrackVBloodUnit_Entry>();
        RegisterComponent<Script_BloodAltar_TrackVBloodUnit_Server>();
        RegisterComponent<Script_BloodAltar_TrackVBloodUnit_Client>();
        RegisterComponent<Script_Convert_Item_OnConsume_DataServer>();
        RegisterComponent<Script_Convert_Item_OnConsume_Entry>();
        RegisterComponent<BiteFinishedEvent>();
        RegisterComponent<BiteKillFinishedEvent>();
        RegisterComponent<ResourceNodeDestroyEvent>();
        RegisterComponent<ProjectM.Gameplay.Scripting.EnterShapeshiftEvent>();
        RegisterComponent<Script_Demount_DataServer>();
        RegisterComponent<DraculaSaveDeathBuff>();
        RegisterComponent<Script_Fly_CheckLanding_DataServer>();
        RegisterComponent<Script_HandleDraculaBlood_Data>();
        RegisterComponent<Script_Knockback_Wall_Buff_DataServer>();
        RegisterComponent<Mount_Travel_DataShared>();
        RegisterComponent<Script_PlaySequenceInSun_DataShared>();
        RegisterComponent<Script_PlaySequenceWhenHasBuff_DataShared>();
        RegisterComponent<Script_PreCast_TakeFlight_DataServer>();
        RegisterComponent<Script_ProjectileSpread_Channel_Data>();
        RegisterComponent<Script_Siphon_Blood_Buff_DataShared>();
        // RegisterComponent<Script_Siphon_Blood_Buff_DataClient>();
        RegisterComponent<Stagger>();
        RegisterComponent<Script_SubdueMount_DataServer>();
        RegisterComponent<TeleportOutOfDraculaOnDeath_DataShared>();
        RegisterComponent<Script_TriggerCooldownOnSpawn_DataServer>();
        RegisterComponent<UpdateBuffTargetSpawnPosition_DataServer>();
        RegisterComponent<Script_Wounded_DataShared>();
        RegisterComponent<AbilityChargeBuff_DataServer>();
        RegisterComponent<AbilityChargeBuff_DataShared>();
        RegisterComponent<AbilityChargeBuff_DataClient>();
        RegisterComponent<AbilityChargeCooldowns>();
        RegisterComponent<Script_AbilityChargeRechargeOnSpawn_Server>();
        RegisterComponent<AbilityChargeResetOnUse>();
        RegisterComponent<AbilityProjectileFanOnGameplayEvent_DataServer>();
        RegisterComponent<SpellTargetHitList_DataServer>();
        RegisterComponent<AbilityProjectileFanOnTick_DataServer>();
        RegisterComponent<Script_AbilityResetAbilityComboOnGameplayEvent_Server>();
        RegisterComponent<AbilityThrowMultipleWithSpreadOnTick_DataServer>();
        RegisterComponent<AbilityThrowTowardsEventHitTarget_DataServer>();
        RegisterComponent<Script_ApplyBuffOnAllWithBuff_Cast_DataServer>();
        RegisterComponent<Script_ApplyDashOnDamageTaken_DataServer>();
        RegisterComponent<Script_BloodTrack_HomingSpell_Data>();
        RegisterComponent<Script_BouncingProjectile_DataServer>();
        RegisterComponent<Script_BouncingProjectile_Delay_DataServer>();
        RegisterComponent<ChangeTranslationOverTime_DataShared>();
        RegisterComponent<Script_CreateGameplayEventOnTickAfterDelay_DataServer>();
        RegisterComponent<Script_CreateGameplayEventOnTickRandomChance_DataServer>();
        RegisterComponent<Script_CreateProfessorCoilEvent_DataServer>();
        RegisterComponent<Script_DestroyBuffOnNoAbilityCharges_Server>();
        RegisterComponent<EvenSpreadCluster_DataServer>();
        RegisterComponent<Throw_Prefabs_To_Spawn>();
        RegisterComponent<EvenSpreadCluster_Tick_DataServer>();
        RegisterComponent<Script_FindClosestSpellTarget_DataServer>();
        RegisterComponent<Script_FlameWhipHeightCheck_Data>();
        RegisterComponent<Script_HomingSpell_DataServer>();
        RegisterComponent<LaunchProjectileFromKiller_DataServer>();
        RegisterComponent<LaunchProjectileTowardsTargetOnGameplayEvent_DataServer>();
        RegisterComponent<Script_LightningProjectile_DataShared>();
        RegisterComponent<Script_LightningProjectile_Nodes>();
        RegisterComponent<Script_LongBowChargeUpHitHandler_Data>();
        RegisterComponent<Script_ModifyBuffResistancesDuringCast_DataServer>();
        RegisterComponent<Script_MultiShot_Cast_DataServer>();
        RegisterComponent<Script_MultiThrow_Cast_DataServer>();
        RegisterComponent<Script_ProfessorProjectileOnGameplayEvent_DataServer>();
        RegisterComponent<Script_RemoveBuffOnAbilityUseData>();
        RegisterComponent<RingAoE_DataShared>();
        RegisterComponent<HitList>();
        RegisterComponent<ScaleDealDamageOnChargeUpFactor_Data>();
        RegisterComponent<Script_SetSpellTargetToAIPoiType_DataServer>();
        RegisterComponent<SpawnThrowFromBuff_DataServer>();
        RegisterComponent<Script_SpawnTravelToTargetOriginPosition_DataServer>();
        RegisterComponent<Script_StormPolarityShift_DataServer>();
        RegisterComponent<ThrowMultiple_PlayerHitCount_DataServer>();
        RegisterComponent<Script_Blood_CrimsonBeam_DataServer>();
        RegisterComponent<Script_Blood_CrimsonBeam_HitElement>();
        RegisterComponent<Script_Blood_CrimsonBeam_DataShared>();
        RegisterComponent<Script_Blood_CrimsonBeam_DataClient>();
        RegisterComponent<Script_Blood_CrimsonBeam_HitSequenceElement>();
        RegisterComponent<Script_Gorgon_Rush_Consume_DataServer>();
        RegisterComponent<Script_Gorgon_Venom_Debuff_DataServer>();
        RegisterComponent<Script_Raven_Projectile_DataServer>();
        RegisterComponent<Script_Raven_Projectile_Channel_DataServer>();
        RegisterComponent<Script_Slashers_DashHit_DataServer>();
        RegisterComponent<SlashersHitList_DataServer>();
        RegisterComponent<Script_Spectral_Empower_DataServer>();
        RegisterComponent<Script_Spectral_Empower_DataClient>();
        RegisterComponent<Script_Spectral_Recharge_DataShared>();
        RegisterComponent<Script_Sword_Shockwave_ReturnToTargetPosition_Data>();
        RegisterComponent<Script_Unholy_BoneSpear_Debuff_DataServer>();
        RegisterComponent<Script_Unholy_BoneSpear_Projectile_DataServer>();
        RegisterComponent<Script_Unholy_Harvest_DataServer>();
        RegisterComponent<Script_Unholy_RaiseDead_DataServer>();
        RegisterComponent<BloodBuff_Scholar_ManaRegenBonus_DataShared>();
        RegisterComponent<BloodBuff_VBlood_0_DataShared>();
        RegisterComponent<BloodBuff_Assault_DataShared>();
        RegisterComponent<RandomMutant>();
        RegisterComponent<BloodBuff_BiteToMutant_DataShared>();
        RegisterComponent<BloodBuff_Brute_ArmorLevelBonus_DataShared>();
        RegisterComponent<BloodBuff_Brute_RecoverOnKill_DataShared>();
        RegisterComponent<BloodBuff_CritAmplifyProc_DataShared>();
        RegisterComponent<BloodBuff_CriticalStrikeOnNextAttack_DataShared>();
        RegisterComponent<BloodBuff_HealReceivedProc_DataShared>();
        RegisterComponent<BloodBuff_Worker_Pulverize_DataShared>();
        RegisterComponent<RelicBuff_NoBloodDrain_DataShared>();
        RegisterComponent<Script_Buff_AggroRangeFactor_DataShared>();
        RegisterComponent<Buff_ApplyBuffOnDamageTypeDealt_DataShared>();
        RegisterComponent<Buff_ApplyBuffOnPrimaryHit_DataShared>();
        RegisterComponent<Buff_ApplyBuffWithAdjustedLifetime_DataShared>();
        RegisterComponent<Buff_ApplyBuffWithParentBuffStacks_DataShared>();
        RegisterComponent<Script_Buff_ApplyNewBuffOnOwnerDeath_DataServer>();
        RegisterComponent<Script_Buff_BatFormInfo_DataShared>();
        RegisterComponent<Buff_EmpowerDamageDealtByType_DataShared>();
        RegisterComponent<Script_Buff_GenerateAggro_DataServer>();
        RegisterComponent<Script_Buff_GrabToOwner_DataServer>();
        RegisterComponent<Buff_HealAttackerOnDamageType_DataShared>();
        RegisterComponent<Buff_HealAttackerOnPrimaryAttack_DataShared>();
        RegisterComponent<Script_Buff_IgnoresPathfindingLineOfSight_DataServer>();
        RegisterComponent<Script_Buff_ModifyAggroFactor_DataServer>();
        RegisterComponent<Script_Buff_ModifyAiPointOfInterestTarget_DataServer>();
        RegisterComponent<Script_Buff_ModifyBuffResistances_DataServer>();
        RegisterComponent<Script_Buff_ModifyCastOptions_DataServer>();
        RegisterComponent<Script_Buff_ModifyCombatMusicSourceActive_DataServer>();
        RegisterComponent<Script_Buff_ModifyDynamicCollision_DataServer>();
        RegisterComponent<Script_Buff_ModifyFaction_DataServer>();
        RegisterComponent<Script_Buff_MountSpeed_DataShared>();
        RegisterComponent<Script_Buff_FreeCast_DataServer>();
        RegisterComponent<Script_Buff_PowerMod_Stacking_DataServer>();
        RegisterComponent<Script_Buff_PvPProtection_DataShared>();
        RegisterComponent<Buff_Reduce_Cooldown_DataShared>();
        RegisterComponent<Buff_Reduce_SpellCooldown_DataShared>();
        RegisterComponent<Script_Buff_SetHybridModel_DataClient>();
        RegisterComponent<Script_Buff_Shapeshift_DataShared>();
        RegisterComponent<Script_Buff_Spellblock_DataServer>();
        RegisterComponent<Script_Buff_Stealth_DataServer>();
        RegisterComponent<Script_Buff_Stealth_Duration_DataServer>();
        RegisterComponent<Script_Buff_StopPatrol_DataServer>();
        RegisterComponent<Script_Buff_TrueForm_DataServer>();
        RegisterComponent<Script_Buff_VisionRangeModification_DataServer>();
        RegisterComponent<Script_Buff_VisionStackModification_DataServer>();
        RegisterComponent<Script_Buff_Werewolf_AttackSpeed_DataServer>();
        RegisterComponent<Script_GarlicAreaLeaveZoneDebuff_DataServer>();
        RegisterComponent<Script_GarlicFeverDebuff_DataServer>();
        RegisterComponent<Script_IgniteDebuff_DataServer>();
        RegisterComponent<Script_PassiveRegen_DataShared>();
        RegisterComponent<Script_ProfessorOverloadOrb_DataServer>();
        RegisterComponent<Script_SetSpellMovementToTarget_DataServer>();
        RegisterComponent<Script_SilverDebuff_DataClient>();
        RegisterComponent<SpawnStructure_WeakenState_DataShared>();
        RegisterComponent<Script_TeleportNearSpellTarget_DataServer>();
        RegisterComponent<Script_TileModelForceAiming_DataServer>();
        RegisterComponent<Script_TriggerAchievementData>();
        RegisterComponent<Script_UnitBloodQualityBuff_Brute_DataShared>();
        RegisterComponent<Script_UnitBloodQualityBuff_Creature_DataShared>();
        RegisterComponent<Script_UnitBloodQualityBuff_Mutant_DataShared>();
        RegisterComponent<Script_UnitBloodQualityBuff_Rogue_DataShared>();
        RegisterComponent<Script_UnitBloodQualityBuff_Scholar_DataShared>();
        RegisterComponent<Script_UnitBloodQualityBuff_Warrior_DataShared>();
        RegisterComponent<Script_UnitBloodQualityBuff_Worker_DataShared>();
        RegisterComponent<CastAbilityInStateScript_DataServer>();
        RegisterComponent<SpiderCocoon_DataShared>();
        RegisterComponent<SpiderCocoonSpawns_DataServer>();
        RegisterComponent<Script_DamageZone_SingleTarget_HitConditions>();
        RegisterComponent<Script_DamageZone_SingleTarget_Shared>();
        RegisterComponent<Script_DamageZone_SingleTarget_HitTarget>();
        RegisterComponent<Script_Dracula_ChunkBuff_DataServer>();
        RegisterComponent<Script_Dracula_DestroyPillars_DataShared>();
        RegisterComponent<Script_Dracula_EndGamePortal_Tag>();
        RegisterComponent<Script_Dracula_SpawnerData>();
        RegisterComponent<Script_Dracula_WarpRiftData>();
        RegisterComponent<Script_Dracula_WarpRiftTargetData>();
        RegisterComponent<Script_EndGameCredits_Data>();
        RegisterComponent<Script_Fisherman_DropItem_Data>();
        RegisterComponent<Script_StealthBush_Environment_Data>();
        RegisterComponent<Script_StealthBush_Environment_HitSpheres>();
        RegisterComponent<Script_StealthBush_Environment_ActiveStealths>();
        RegisterComponent<Script_ToggleNearbyArmorRacks_DataShared>();
        RegisterComponent<Script_TransitionInteractedOnSpawn_DataServer>();
        RegisterComponent<Script_Vampire_Ghost_Data>();
        RegisterComponent<Script_WerewolfChieftain_ToggleGates_DataShared>();
        RegisterComponent<ExampleScript_DataServer>();
        RegisterComponent<ExampleScript_DataClient>();
        RegisterComponent<Example_BossBarrel_DataShared>();
        RegisterComponent<Example_Buffer_Entry>();
        RegisterComponent<Example_GameplayEvent_DataServer>();
        RegisterComponent<Example_ExplodeCloseBarrelOnCast_DataShared>();
        RegisterComponent<Example_ExplodeCloseBarrel_Event>();
        RegisterComponent<Example_ExplosiveBarrel_DataShared>();
        RegisterComponent<Example_Modifications_DataServer>();
        RegisterComponent<AbilityChargeRechargeOnGameplayEvent_Server>();
        RegisterComponent<ApplyCarriageDriverCoverBuffServerData>();
        RegisterComponent<Script_BranchOnRandomGameplayEventData>();
        RegisterComponent<Script_ConsumeItemOnGameplayEvent_DataServer>();
        RegisterComponent<Script_CreateGameplayEventOnAreaEnterExit_DataServer>();
        RegisterComponent<Script_CreateGameplayEventOnAreaEnterExit_Entry>();
        RegisterComponent<Script_CreateGameplayEventOnBuffTargetDeath_DataServer>();
        RegisterComponent<Script_CreateGameplayEventOnDamageDealtToEntityCategory_DataServer>();
        RegisterComponent<Script_CreateGameplayEventOnDamageTakenToEntityCategory_DataServer>();
        RegisterComponent<Script_CreateGameplayEventOnDestroyHitOrMiss_DataServer>();
        RegisterComponent<Script_CreateGameplayEventOnDetectNoMovementOnTick_DataServer>();
        RegisterComponent<Script_CreateGameplayEventOnHitBuffPriority_DataServer>();
        RegisterComponent<BuffPriority_HitList_Previous>();
        RegisterComponent<Script_CreateGameplayEventOnHitConsumableProjectile_DataServer>();
        RegisterComponent<ConsumableProjectile_HitList>();
        RegisterComponent<Script_CreateGameplayEventOnHitDetection_DataServer>();
        RegisterComponent<Script_CreateGameplayEventOnTargetKilled_DataServer>();
        RegisterComponent<Script_CreateGameplayEventOnTeleporterMatch_DataServer>();
        RegisterComponent<Script_DraculinBloodMendHeal_DataServer>();
        RegisterComponent<Script_ModifyAbilityCooldownOnGameplayEvent_DataServer>();
        RegisterComponent<Script_ModifySpellAbilityCooldownOnGameplayEvent_DataServer>();
        RegisterComponent<Script_Passive_SpawnPrefabOnGameplayEvent_DataServer>();
        RegisterComponent<Script_SetAbilityCooldownOnGameplayEvent_DataServer>();
        RegisterComponent<Script_SetBehaviourTreeStateOnGameplayEvent_DataServer>();
        RegisterComponent<Script_ApplyBuffOnAggroListTarget_DataServer>();
        RegisterComponent<Script_ApplyBuffUnderHealthThreshhold_MonsterVBlood_DataServer>();
        RegisterComponent<Script_ApplyBuffUnderHealthThreshold_DataServer>();
        RegisterComponent<Script_ApplyBuffUnderThreeHealthThreshholds_DataServer>();
        RegisterComponent<Script_ApplyBuffUnderThreeHealthThreshholdsDataCarrier_DataServer>();
        RegisterComponent<Script_ApplyBuffWhenDamageDealt_DataServer>();
        RegisterComponent<Script_ApplyExclusiveSiegeBuff_DataServer>();
        RegisterComponent<Script_BatformSCT_DataServer>();
        RegisterComponent<Buff_HealthThreshold_DataServer>();
        RegisterComponent<ColliderEntities>();
        RegisterComponent<Script_CarriageCollidersData>();
        RegisterComponent<Script_CarriageDriverData>();
        RegisterComponent<Script_ClusterBomb_Cast_DataServer>();
        RegisterComponent<Script_CreateGameplayEventIfKilledHasBuff_DataServer>();
        RegisterComponent<Script_Dracula_SquareAreaSpawner_DataServer>();
        RegisterComponent<EtherialState_DataShared>();
        RegisterComponent<Script_FilterTargetOnGameplayEvent_ConstantData>();
        RegisterComponent<Script_FilterTargetOnGameplayEvent_Triggers>();
        RegisterComponent<Script_GrowingProjectile_DataServer>();
        RegisterComponent<Script_HealOnCriticalBuff_DataServer>();
        RegisterComponent<Script_HomingProjectileBoostOverLifetime_DataServer>();
        RegisterComponent<BoostProjectileHitList>();
        RegisterComponent<Script_IceMovementBuff_DataServer>();
        RegisterComponent<Script_IncreaseDamageFromSource_Entry>();
        RegisterComponent<Script_IncreaseDamageIfTargetHasBuff_Entry>();
        RegisterComponent<Script_IncreaseLifeTimeCondition_Data>();
        RegisterComponent<MountBuff_Sequence_DataServer>();
        RegisterComponent<MountedAbilityCastSequence_DataServer>();
        RegisterComponent<Script_PrisonInteract_DataServer>();
        RegisterComponent<Script_ReduceDamageTakenWhileBelowHealth_DataServer>();
        RegisterComponent<Script_RemoteImprison_DataServer>();
        RegisterComponent<RotateOverTimeData>();
        RegisterComponent<Script_SCTChatOnAggro_Data>();
        RegisterComponent<Script_SCTChatOnAggro_Buffer>();
        RegisterComponent<Script_SCTChatOnSpawn_Data>();
        RegisterComponent<Script_SCTChatOnSpawn_Buffer>();
        RegisterComponent<Script_SCTOnCast_DataServer>();
        RegisterComponent<Script_SCTOnEvent_DataServer>();
        RegisterComponent<Script_SetFlyingHeightVision_Buff_DataShared>();
        RegisterComponent<Script_SetHealthToOwnerPercentage_DataServer>();
        RegisterComponent<Script_SetSpellTargetToAggroListTarget_DataServer>();
        RegisterComponent<Script_SetTransformBasedOnNearbyEntity_DataServer>();
        RegisterComponent<Script_SetWeaponRunCycle_DataClient>();
        RegisterComponent<Script_SharedHealthPoolBuff_DataServer>();
        RegisterComponent<Script_SommelierBarrelDance_DataServer>();
        RegisterComponent<Script_SommelierBarrelFountain_DataServer>();
        RegisterComponent<BarrelIds>();
        RegisterComponent<Script_SommelierHorizontalBarrels_DataServer>();
        RegisterComponent<Script_SpawnAnotherThrowSameDirection_DataServer>();
        RegisterComponent<Script_SpawnPrefabOnMiss_DataServer>();
        RegisterComponent<Script_SpawnThrowTowardsNearbyVampires_DataServer>();
        RegisterComponent<Script_SpellSchoolPassive_ShapeshiftEmpowered_DataServer>();
        RegisterComponent<Script_SpellSchoolPassive_Storm_FeedFrenzy_DataServer>();
        RegisterComponent<Script_SpellSchoolPassive_Unholy_Feed_DataServer>();
        RegisterComponent<Script_Dracula_EnterTeleportData>();
        RegisterComponent<Script_UnitSpawn_DataServer>();
        RegisterComponent<Script_VampireInteractionSequence_Data>();
        RegisterComponent<Script_WarningCircle_Buff_Visuals_DataClient>();
        RegisterComponent<Script_WarningCircle_Visuals_DataClient>();
        RegisterComponent<SmurfMultiShot_DataServer>();
        RegisterComponent<SmurfProjectile_DataServer>();
        RegisterComponent<SmurfProjectile_HitListServer>();
        RegisterComponent<SmurfProjectile_DataClient>();
        RegisterComponent<TestScript_DataServer>();
        RegisterComponent<ColliderBlobCleanupData>();
        RegisterComponent<EnsureUniqueColliderBlobTag>();
        RegisterComponent<PhysicsWorldIndex>();
        RegisterComponent<PhysicsCollider>();
        RegisterComponent<PhysicsColliderKeyEntityPair>();
        RegisterComponent<PhysicsMass>();
        RegisterComponent<PhysicsMassOverride>();
        RegisterComponent<PhysicsVelocity>();
        RegisterComponent<PhysicsDamping>();
        RegisterComponent<PhysicsGravityFactor>();
        RegisterComponent<PhysicsCustomTags>();
        RegisterComponent<PhysicsStep>();
        RegisterComponent<SimulationSingleton>();
        RegisterComponent<PhysicsWorldSingleton>();
        RegisterComponent<StepInputSingleton>();
        RegisterComponent<CustomPhysicsProxyDriver>();
        RegisterComponent<PhysicsConstrainedBodyPair>();
        RegisterComponent<PhysicsJointCompanion>();
        RegisterComponent<PhysicsJoint>();
        RegisterComponent<PhysicsGraphicalSmoothing>();
        RegisterComponent<PhysicsGraphicalInterpolationBuffer>();
        RegisterComponent<PhysicsRenderEntity>();
        RegisterComponent<MostRecentFixedTime>();
        RegisterComponent<SmoothRigidBodiesGraphicalMotion.RigidBodySmoothingWorldIndex>();
        RegisterComponent<StaticPhysicsWorldBodyIndex>();
        RegisterComponent<BuildStaticPhysicsWorldSingleton>();
        RegisterComponent<BuildPhysicsWorldData>();
        RegisterComponent<DummySimulationData>();
        RegisterComponent<BroadphaseData>();
        RegisterComponent<AggroChangeLogQueue>();
        RegisterComponent<AiPrioritizationSystem.SystemData>();
        RegisterComponent<GetOwnerPrimaryAggroTargetOnSpawn>();
        RegisterComponent<CastOptionBuffer>();
        RegisterComponent<CastOptionGroupBuffer>();
        RegisterComponent<CastOptionStateBuffer>();
        RegisterComponent<CastOptionRoot>();
        RegisterComponent<BehaviourTree>();
        RegisterComponent<BehaviourTreeNodeInstanceElement>();
        RegisterComponent<BehaviourTreeDebugScrubData>();
        RegisterComponent<BehaviourTreeDebugScrubBuffer>();
        RegisterComponent<BehaviourTreeDebugScrubBlackboardBuffer>();
        RegisterComponent<ErroneousBehaviourTreeNode>();
        RegisterComponent<EvaluateCastOptionsRequest>();
        RegisterComponent<ModifyBehaviourBuff>();
        RegisterComponent<RegisterEntityInBlackboard>();
        RegisterComponent<FluffMaskPoolAllocation>();
        RegisterComponent<FluffChunkPoolAllocation>();
        RegisterComponent<ChunkPortalBakingComponent>();
        RegisterComponent<ChunkWaypointBakingComponent>();
        RegisterComponent<NetherSpawnBakingComponent>();
        RegisterComponent<SpawnRegion>();
        RegisterComponent<SpawnGroupBuffer>();
        RegisterComponent<SpawnPointBuffer>();
        RegisterComponent<SpawnGroupData>();
        RegisterComponent<SpawnGroup_SpawnTableBuffer>();
        RegisterComponent<SpawnRegionSpawnSlotEntry>();
        RegisterComponent<TerrainBlockBuffer>();
        RegisterComponent<TerrainBlockInstanceBuffer>();
        RegisterComponent<TerrainCornerData>();
        RegisterComponent<TerrainBlockInstance>();
        RegisterComponent<BlocksetConfig>();
        RegisterComponent<PersistentBlocksetBlockBuffer>();
        RegisterComponent<BaseBlockVariantBuffer>();
        RegisterComponent<BlockSetTileTypes>();
        RegisterComponent<SelectedEditorBrush>();
        RegisterComponent<BrushTarget>();
        RegisterComponent<FreezeBrushPosition>();
        RegisterComponent<ChunkEditorBrush>();
        RegisterComponent<PenBrush>();
        RegisterComponent<StampBrush>();
        RegisterComponent<StampTextureBuffer>();
        RegisterComponent<EditorInputEnabled>();
        RegisterComponent<EditorMouseInput>();
        RegisterComponent<EditorKeyboardInput>();
        RegisterComponent<StandardPaintComponents.RequestedCornerModification>();
        RegisterComponent<StandardPaintComponents.AcceptedCornerModification>();
        RegisterComponent<StandardPaintComponents.TileToUpdate>();
        RegisterComponent<UpdateBlockRequestBuffer>();
        RegisterComponent<StopPaintingEvent>();
        RegisterComponent<ActivePaintOperation>();
        RegisterComponent<BrushedCoordinate>();
        RegisterComponent<BrushPreview>();
        RegisterComponent<MakeStaticOnLoad>();
        RegisterComponent<TerrainSpawningComponents.IsSpawned>();
        RegisterComponent<DirtyTerrain>();
        RegisterComponent<OngoingModification>();
        RegisterComponent<BlocksetSingleton>();
        RegisterComponent<BlocksetBaseBlocks>();
        RegisterComponent<SubSceneTerrainBakingTag>();
        RegisterComponent<FluffTypeDirty>();
        RegisterComponent<FluffInstanceDirty>();
        RegisterComponent<FluffEditorSpawnData>();
        RegisterComponent<FluffTypeEnabled>();
        RegisterComponent<FluffInstanceEnabled>();
        RegisterComponent<FluffSpawnData>();
        RegisterComponent<FluffConversionSpawnData>();
        RegisterComponent<FluffConversionBrushData>();
        RegisterComponent<FluffConversionTerrain>();
        RegisterComponent<SurfaceBrushIndexBaking>();
        RegisterComponent<FluffDataBlob>();
        RegisterComponent<ChunkFluffTransformation>();
        RegisterComponent<GlobalPatrolElement>();
        RegisterComponent<MapRegionNameComponent>();
        RegisterComponent<TerrainPrefabInstance>();
        RegisterComponent<WarEventInfoEntryPosition>();
        RegisterComponent<WorldInitializationSystem.Initialized>();
        RegisterComponent<WorldZoneId>();
        RegisterComponent<RevealedMap_Client>();
        RegisterComponent<WorldZoneTextureProjectionMatrix>();
        RegisterComponent<SceneryObjectBlocker>();
        RegisterComponent<SurfaceBrushPerTile>();
        RegisterComponent<SurfaceTypeElement>();
        RegisterComponent<RecalculateSurfaceColorsEvent>();
        RegisterComponent<RecalculateSurfaceTypesEvent>();
        RegisterComponent<SurfaceControlColors>();
        RegisterComponent<SurfaceTileLockStates>();
        RegisterComponent<SurfaceTileEnabledStates>();
        RegisterComponent<SurfaceControlIndexes>();
        RegisterComponent<LargestFluffBounds>();
        RegisterComponent<SurfaceFluffAllowance>();
        RegisterComponent<DisableFluffSingleton>();
        RegisterComponent<FluffRenderer>();
        RegisterComponent<BrushBarrierSystem.Singleton>();
        RegisterComponent<PostPaintBarrierSystem.Singleton>();
        RegisterComponent<SurfaceTextureBarrier.Singleton>();
        RegisterComponent<ShowControllableAreaGrid>();
        RegisterComponent<ControlledAreaPaintColorsBuffer>();
        RegisterComponent<ShowControlledAreaIdGridSystem.GridIsActive>();
        RegisterComponent<ShowRoadRestrictionGrid>();
        RegisterComponent<ShowSurfaceEnabledGrid>();
        RegisterComponent<ShowSurfaceEnabledGridSystem.GridIsActive>();
        RegisterComponent<ShowSurfaceTypeGrid>();
        RegisterComponent<ShowSurfaceDebugGridSystem.GridIsActive>();
        RegisterComponent<CalculateDirtyFluffChunksSystem.Singleton>();
        RegisterComponent<FluffEditorRuntimeRenderDataSystem.FluffChunkDataIndex>();
        RegisterComponent<RenderFluffBarrier.Singleton>();
        RegisterComponent<ChunkLoader>();
        RegisterComponent<WorldLoadingManagerSystem.ActiveLoadRequest>();
        RegisterComponent<WorldLoadingManagerSystem.AssumeFailedLoadRequest>();
        RegisterComponent<TerrainEditorPrefabToken>();
        RegisterComponent<ForceControlledInCombatSingleton>();
        RegisterComponent<IndoorMaskingAABB>();
        RegisterComponent<MoodIndex>();
        RegisterComponent<ProxyPrefabIndex>();
        RegisterComponent<CastleBuffsSettings>();
        RegisterComponent<DebugWorldTileCollisionBounds>();
        RegisterComponent<DebugWorldTilePlacementBounds>();
        RegisterComponent<DebugWorldSurfaceFluffBounds>();
        RegisterComponent<DebugWorldLineOfSightBounds>();
        RegisterComponent<DebugWorldPathfindingBounds>();
        RegisterComponent<DebugWorldTileHeightBounds>();
        RegisterComponent<DebugWorldCastleAreaBounds>();
        RegisterComponent<DebugWorldRestrictionAreaBounds>();
        RegisterComponent<RoofTileData>();
        RegisterComponent<RoofInstanceTypeId>();
        RegisterComponent<TerritorySpawnSystem.LoadedCastleTerritory>();
        RegisterComponent<BuildModeOpenedSystem_Client.Handled>();
        RegisterComponent<CastleTerritoryHeightsSystem.QueuedTerrainChunkLoadedEvent>();
        RegisterComponent<CastleRoomEvent>();
        RegisterComponent<TerritoryTile>();
        RegisterComponent<ShowPhysicsColliders>();
        RegisterComponent<SubSceneStaticRootCollider>();
        RegisterComponent<IgnoreStaticBakingOfCollider>();
        RegisterComponent<PhysicsBodyAuthoringData>();
        RegisterComponent<JointEntityBaking>();
        RegisterComponent<PhysicsDebugDisplayData>();
        RegisterComponent<PhysicsWorldIndexBakingData>();
        RegisterComponent<PhysicsColliderAuthoringData>();
        RegisterComponent<PhysicsMeshAuthoringData>();
        RegisterComponent<PhysicsColliderBakedData>();
        RegisterComponent<PhysicsPostProcessData>();
        RegisterComponent<PhysicsRootBaked>();
        RegisterComponent<PhysicsCompoundData>();
        RegisterComponent<RigidbodyBakingData>();
        RegisterComponent<StaticOptimizePhysicsBaking>();
        RegisterComponent<BakeStaticRoot>();
        RegisterComponent<StaticOptimizeBakingSystem.StaticRootState>();
        RegisterComponent<RenderFilterSettings>();
        RegisterComponent<OriginalLODGroupDebugData>();
        RegisterComponent<CustomCulling>();
        RegisterComponent<OcclusionCulling>();
        RegisterComponent<NotSunBlocker>();
        RegisterComponent<BuiltinMaterialPropertyUnity_DynamicLightmapST>();
        RegisterComponent<BuiltinMaterialPropertyUnity_LightmapIndex>();
        RegisterComponent<BuiltinMaterialPropertyUnity_LightmapST>();
        RegisterComponent<BuiltinMaterialPropertyUnity_LODFade>();
        RegisterComponent<BuiltinMaterialPropertyUnity_MatrixPreviousM>();
        RegisterComponent<BuiltinMaterialPropertyUnity_MatrixPreviousMI_Tag>();
        RegisterComponent<BuiltinMaterialPropertyUnity_ProbesOcclusion>();
        RegisterComponent<BuiltinMaterialPropertyUnity_ProbeVolumeMin>();
        RegisterComponent<BuiltinMaterialPropertyUnity_ProbeVolumeParams>();
        RegisterComponent<BuiltinMaterialPropertyUnity_ProbeVolumeSizeInv>();
        RegisterComponent<BuiltinMaterialPropertyUnity_ProbeVolumeWorldToObject>();
        RegisterComponent<BuiltinMaterialPropertyUnity_SHCoefficients>();
        RegisterComponent<BuiltinMaterialPropertyUnity_SpecCube0_HDR>();
        RegisterComponent<BlendWeightBufferIndex>();
        RegisterComponent<DeformedMeshIndex>();
        RegisterComponent<DeformedEntity>();
        RegisterComponent<SharedMeshTracker>();
        RegisterComponent<SkinMatrixBufferIndex>();
        RegisterComponent<DisableRendering>();
        RegisterComponent<EntitiesGraphicsChunkInfo>();
        RegisterComponent<EntitiesGraphicsBatchPartition>();
        RegisterComponent<WorldToLocal_Tag>();
        RegisterComponent<DepthSorted_Tag>();
        RegisterComponent<LightBakingOutputData>();
        RegisterComponent<FrozenRenderSceneTag>();
        RegisterComponent<HDRPMaterialPropertyAlphaCutoff>();
        RegisterComponent<HDRPMaterialPropertyAORemapMax>();
        RegisterComponent<HDRPMaterialPropertyAORemapMin>();
        RegisterComponent<HDRPMaterialPropertyBaseColor>();
        RegisterComponent<HDRPMaterialPropertyDetailAlbedoScale>();
        RegisterComponent<HDRPMaterialPropertyDetailNormalScale>();
        RegisterComponent<HDRPMaterialPropertyDetailSmoothnessScale>();
        RegisterComponent<HDRPMaterialPropertyDiffusionProfileHash>();
        RegisterComponent<HDRPMaterialPropertyEmissiveColor>();
        RegisterComponent<HDRPMaterialPropertyMetallic>();
        RegisterComponent<HDRPMaterialPropertySmoothness>();
        RegisterComponent<HDRPMaterialPropertySmoothnessRemapMax>();
        RegisterComponent<HDRPMaterialPropertySmoothnessRemapMin>();
        RegisterComponent<HDRPMaterialPropertySpecularColor>();
        RegisterComponent<HDRPMaterialPropertyThickness>();
        RegisterComponent<HDRPMaterialPropertyThicknessRemap>();
        RegisterComponent<HDRPMaterialPropertyUnlitColor>();
        RegisterComponent<PerInstanceCullingTag>();
        RegisterComponent<RootLODWorldReferencePoint>();
        RegisterComponent<RootLODRange>();
        RegisterComponent<LODWorldReferencePoint>();
        RegisterComponent<LODRange>();
        RegisterComponent<MaterialColor>();
        RegisterComponent<MeshLODGroupComponent>();
        RegisterComponent<LODGroupWorldReferencePoint>();
        RegisterComponent<MeshLODComponent>();
        // RegisterComponent<LODCrossFadeFactor>();
        RegisterComponent<MeshRendererBakingData>();
        RegisterComponent<AdditionalMeshRendererEntity>();
        RegisterComponent<BlendProbeTag>();
        RegisterComponent<CustomProbeTag>();
        RegisterComponent<RenderBounds>();
        RegisterComponent<WorldRenderBounds>();
        RegisterComponent<ChunkWorldRenderBounds>();
        RegisterComponent<MaterialMeshInfo>();
        RegisterComponent<SkinnedMeshRendererBakingData>();
        // RegisterComponent<LODOverride>();
        RegisterComponent<DestroyAfterLifetimeTag_Client>();
        RegisterComponent<DebugStruct>();
        RegisterComponent<NetworkSyncDebugEnabled>();
        RegisterComponent<ServerShutdown>();
        RegisterComponent<BakedEntity>();
        RegisterComponent<BakingOnlyEntity>();
        RegisterComponent<RemoveUnusedEntityInBake>();
        RegisterComponent<TransformAuthoring>();
        RegisterComponent<AdditionalEntityParent>();
        RegisterComponent<CompanionGameObjectActiveCleanup>();
        RegisterComponent<AdditionalEntitiesBakingData>();
        RegisterComponent<BakingOnlyEntityAuthoringBaker.BakingOnlyChildren>();
        RegisterComponent<LinkedEntityGroupBakingData>();
        RegisterComponent<DestroyEntityAfterBaking>();
        RegisterComponent<IgnoreDestroyEntityAfterBaking>();
        RegisterComponent<DisconnectFromLinkedEntityGroup>();
        RegisterComponent<PrefabDependency>();
        RegisterComponent<WorldBootstrap.ReservedEntityIndex>();
        RegisterComponent<WorldTypeSingleton>();
        RegisterComponent<OutdatedPrefab>();
        RegisterComponent<RegisterPrefabCollectionDataEvent>();
        RegisterComponent<RegisterPrefabMetadataElement>();
        RegisterComponent<BakedEntityNamesElement>();
        RegisterComponent<EditorDebugInfo_BakingSource>();
        RegisterComponent<PrefabGUID>();
        RegisterComponent<ShouldHaveSpawnTag>();
        RegisterComponent<ChildPrefabTag>();
        RegisterComponent<PrefabLookupMap>();
        RegisterComponent<NewPrefabsRegisteredEvent>();
        RegisterComponent<RegisterManagedDataEvent>();
        RegisterComponent<RegisterPrefabEvent>();
        RegisterComponent<RegisterPrefab>();
        RegisterComponent<SystemUpdateFrequencySystem.Singleton>();
        RegisterComponent<WaitingForBaking>();
        RegisterComponent<ConvertedScriptableObject>();
        RegisterComponent<ScriptableObjectCollectionTag>();
        RegisterComponent<AddBufferToEntity>();
        RegisterComponent<ProjectM.AddComponentFromMultipleSources>();
        RegisterComponent<QueueEntityTransformEdit>();
        RegisterComponent<UpdateTilePositionSystem.Singleton>();
        RegisterComponent<UntransformedStaticTileWorldOwner>();
        RegisterComponent<FadeBakingSetup>();
        RegisterComponent<StripComponentInWorldSystem.DestroyArchetype>();
        RegisterComponent<EditorRenderData>();
        RegisterComponent<SceneSectionStreamingSystem.StreamingState>();
        RegisterComponent<SceneSystemConfiguration>();
        RegisterComponent<DisableLiveConversion>();
        RegisterComponent<LiveConversionPatcher.LiveConvertedSceneCleanup>();
        RegisterComponent<PublicEntityRef>();
        RegisterComponent<ResolvedSectionEntity>();
        RegisterComponent<SceneEntityReference>();
        RegisterComponent<ResolvedSceneHash>();
        RegisterComponent<ResolvedSectionPath>();
        RegisterComponent<DisableSceneResolveAndLoad>();
        RegisterComponent<SceneBoundingVolume>();
        RegisterComponent<RequestSceneHeader>();
        RegisterComponent<SceneSectionReferencedUnityObjects>();
        RegisterComponent<IsSectionLoaded>();
        RegisterComponent<SceneSectionStreamingData>();
        RegisterComponent<SceneSystemData>();
        RegisterComponent<PrefabLoadResult>();
        RegisterComponent<PrefabAssetReference>();
        RegisterComponent<RequestEntityPrefabLoaded>();
        RegisterComponent<WeakAssetPrefabLoadRequest>();
        RegisterComponent<WeakAssetReferenceLoadingData>();
        // RegisterComponent<FreezeCameraMouseTracking>();
        RegisterComponent<AdaptiveTriggerCollection>();
        RegisterComponent<TriggerEffectData>();
        RegisterComponent<AdaptiveTriggerEvent>();
        RegisterComponent<HandledAdaptiveTriggerEvent>();
        RegisterComponent<HapticDamageFeedback>();
        RegisterComponent<HandledHapticEvent>();
        RegisterComponent<AiDebugDraw>();
        RegisterComponent<PathBuffer>();
        RegisterComponent<PathRequestFilledSegmentBuffer>();
        RegisterComponent<PathRequestSolveDebugBuffer>();
        RegisterComponent<Pathfinder>();
        RegisterComponent<LastPathRequest>();
        RegisterComponent<PathRequest>();
        RegisterComponent<UnsmoothedPathBuffer>();
        RegisterComponent<PersistenceV2.LoadedTag>();
        RegisterComponent<PersistenceV2.InstantiatedOnLoadTag>();
        RegisterComponent<PersistenceV2.DontSaveEntity>();
        RegisterComponent<PersistenceV2.StoreSubSceneEntity>();
        RegisterComponent<PersistenceV2.MissingStoreSubSceneEntity>();
        RegisterComponent<WindMotor>();
        RegisterComponent<WindZoneSphere>();
        RegisterComponent<WindZoneBox>();
        RegisterComponent<LocalToWorld>();
        RegisterComponent<LocalTransform>();
        RegisterComponent<Parent>();
        RegisterComponent<StaticChild>();
        RegisterComponent<PreviousParent>();
        RegisterComponent<Child>();
        RegisterComponent<PostTransformMatrix>();
        RegisterComponent<SequenceInstance>();
        RegisterComponent<DefaultBlackboardValueElement>();
        RegisterComponent<BlackboardElement>();
        RegisterComponent<GraphProgramElement>();
        RegisterComponent<CompanionGameObjectUpdateTransformCleanup>();
        RegisterComponent<BlendShapeWeight>();
        RegisterComponent<SkinMatrix>();

        _initialized = true;
    }
}

