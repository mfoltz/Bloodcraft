using System;
using System.Collections.Concurrent;
using Bloodcraft.Factory;
using Bloodcraft.Services;
using Bloodcraft.Utilities;
using Il2CppInterop.Runtime;
using ProjectM;
using ProjectM.Scripting;
using ProjectM.Shared.WarEvents;
using Unity.Collections;
using Unity.Entities;
using Unity.Transforms;

namespace Bloodcraft.Systems;

public partial class PrimalWarEventSystem
{
    public sealed class Work : ISystemWork
    {
        PrimalWarEventSystem _system;
        ServerGameManager _serverGameManager;
        QueryHandle _gateQuery;
        QueryHandle _portalQuery;

        SystemWorkBuilder.ComponentLookupHandle<VBloodUnit> _vBloodLookup;
        SystemWorkBuilder.ComponentLookupHandle<Translation> _translationLookup;

        SystemWorkBuilder.ComponentTypeHandleHandle<WarEvent_ActiveGate> _gateHandle;
        SystemWorkBuilder.ComponentTypeHandleHandle<WarEvent_ActivePortal> _portalHandle;
        SystemWorkBuilder.BufferTypeHandleHandle<WarEvent_ActiveUnit> _unitBufferHandle;

        NativeParallelHashSet<Entity> _handled;
        readonly ConcurrentDictionary<Entity, ActiveRift> _activeRifts = new();

        public void Build(ref EntityQueryBuilder builder)
        {
            builder.AddAll(ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveGate>()));
            builder.AddAll(ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveUnit>()));
            builder.WithOptions(EntityQueryOptions.IncludeDisabled);
        }

        public void OnCreate(SystemContext context)
        {
            _gateQuery = context.CreateQuery(ConfigureGateQuery, requireForUpdate: true);
            _portalQuery = context.CreateQuery(ConfigurePortalQuery, requireForUpdate: true);

            _vBloodLookup = SystemWorkBuilder.CreateLookup<VBloodUnit>(context, true);
            _translationLookup = SystemWorkBuilder.CreateLookup<Translation>(context, true);

            _gateHandle = SystemWorkBuilder.CreateComponentTypeHandle<WarEvent_ActiveGate>(context, true);
            _portalHandle = SystemWorkBuilder.CreateComponentTypeHandle<WarEvent_ActivePortal>(context, true);
            _unitBufferHandle = SystemWorkBuilder.CreateBufferTypeHandle<WarEvent_ActiveUnit>(context, true);

            _handled = new NativeParallelHashSet<Entity>(512, Allocator.Persistent);

            _system = (PrimalWarEventSystem)context.System;
            Instance = _system;
        }

        public void OnStartRunning(SystemContext context)
        {
            _serverGameManager = context.System.World.GetExistingSystemManaged<ServerScriptMapper>().GetServerGameManager();

            if (!_isEdited)
            {
                _isEdited = _system.TryModifyPrimalUnitCompositions(_serverGameManager);
            }
        }

        public void OnUpdate(SystemContext context)
        {
            HandleActiveGates(context);
            HandleActivePortals(context);
            OnSweep(context);
        }

        public void OnDestroy(SystemContext context)
        {
            if (_handled.IsCreated)
            {
                _handled.Dispose();
            }

            _activeRifts.Clear();

            Instance = null;
            _nextRiftTime = double.MaxValue;
            _lastNotified = -1;
            _isEdited = false;

            _system = null;
            _gateQuery = null;
            _portalQuery = null;
        }

        void ConfigureGateQuery(ref EntityQueryBuilder builder)
        {
            builder.AddAll(ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveGate>()));
            builder.AddAll(ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveUnit>()));
            builder.WithOptions(EntityQueryOptions.IncludeDisabled);
        }

        void ConfigurePortalQuery(ref EntityQueryBuilder builder)
        {
            builder.AddAll(ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActivePortal>()));
            builder.AddAll(ComponentType.ReadOnly(Il2CppType.Of<WarEvent_ActiveUnit>()));
            builder.WithOptions(EntityQueryOptions.IncludeDisabled);
        }

        void HandleActiveGates(SystemContext context)
        {
            var storageLookup = context.EntityStorageInfoLookup;
            var translationLookup = _translationLookup.Lookup;
            var vBloodLookup = _vBloodLookup.Lookup;

            try
            {
                SystemWorkBuilder.ForEachChunk(context, _gateQuery, chunk =>
                {
                    var gates = chunk.GetNativeArray(_gateHandle);
                    var unitBuffers = chunk.GetBufferAccessor(_unitBufferHandle);
                    var entities = chunk.Entities;

                    for (int i = 0; i < chunk.Count; ++i)
                    {
                        WarEvent_ActiveGate activeGate = gates[i];
                        Entity entity = entities[i];

                        if (!activeGate.UnitComposition.Equals(_primalGate))
                            continue;

                        var buffer = unitBuffers[i];
                        bool isActive = false;

                        foreach (var activeUnit in buffer)
                        {
                            Entity unitEntity = activeUnit.Instance;
                            bool isGateBoss = vBloodLookup.HasComponent(unitEntity);

                            if (!storageLookup.Exists(unitEntity))
                                continue;

                            if (_handled.Contains(unitEntity))
                            {
                                isActive = true;
                                continue;
                            }

                            Core.Delayed(() => unitEntity.TryApplyBuffWithLifeTimeNone(_variantBuffs.DrawRandom()));
                            ModifyPrimalUnit(unitEntity, isGateBoss);

                            isActive = true;
                            _handled.Add(unitEntity);
                        }

                        if (!isActive || !translationLookup.TryGetComponent(entity, out Translation translation))
                            continue;

                        if (!_activeRifts.TryGetValue(entity, out ActiveRift activeRift))
                        {
                            activeRift = new(_system._riftHazards.DrawRandom(), _serverGameManager.ServerTime + Constants.RIFT_DURATION);
                            _activeRifts.TryAdd(entity, activeRift);
                        }

                        if (isActive)
                        {
                            activeRift.Hazard.TrySpawnHazard(_serverGameManager, translation.Value);
                        }
                    }
                });
            }
            catch (Exception e)
            {
                Core.Log.LogError($"[PrimalWarEventSystem.HandleActiveGates] Exception: {e}");
            }
        }

        void HandleActivePortals(SystemContext context)
        {
            var storageLookup = context.EntityStorageInfoLookup;

            try
            {
                SystemWorkBuilder.ForEachChunk(context, _portalQuery, chunk =>
                {
                    var portals = chunk.GetNativeArray(_portalHandle);
                    var unitBuffers = chunk.GetBufferAccessor(_unitBufferHandle);
                    var entities = chunk.Entities;

                    for (int i = 0; i < chunk.Count; ++i)
                    {
                        WarEvent_ActivePortal activePortal = portals[i];
                        Entity entity = entities[i];

                        if (!activePortal.UnitComposition.Equals(_primalPortal))
                            continue;

                        var buffer = unitBuffers[i];

                        foreach (var activeUnit in buffer)
                        {
                            Entity unitEntity = activeUnit.Instance;

                            if (!storageLookup.Exists(unitEntity))
                                continue;
                            if (_handled.Contains(unitEntity))
                                continue;

                            if (Misc.RollForChance(Constants.BUFF_CHANCE))
                            {
                                Core.Delayed(() => unitEntity.TryApplyBuffWithLifeTimeNone(_variantBuffs.DrawRandom()));
                            }

                            ModifyPrimalUnit(unitEntity);
                            _handled.Add(unitEntity);
                        }
                    }
                });
            }
            catch (Exception e)
            {
                Plugin.LogInstance.LogError($"[PrimalWarEventSystem.HandleActivePortals] Exception: {e}");
            }
        }

        void OnSweep(SystemContext context)
        {
            var storageLookup = context.EntityStorageInfoLookup;
            var units = _handled.ToNativeArray(Allocator.Temp);

            try
            {
                foreach (var unit in units)
                {
                    if (!storageLookup.Exists(unit))
                    {
                        _handled.Remove(unit);
                    }
                }
            }
            finally
            {
                if (units.IsCreated)
                {
                    units.Dispose();
                }
            }

            foreach (var kvp in _activeRifts)
            {
                if (_serverGameManager.ServerTime >= kvp.Value.Lifetime)
                {
                    _activeRifts.TryRemove(kvp.Key, out _);
                }
            }
        }
    }
}
